@using Common.Client
@using Common.Shared
@using Common.Shared.Auth
@using Oak.Api.Comment
@using Oak.Api.File
@using Oak.Api.VItem
@using Oak.Client.Lib
@using IApi = Oak.Api.IApi
@using ATask = Oak.Api.Task.Task;
@using S = Oak.I18n.S
<div class="root col p-0h g-0h jc-s ai-s">
    @if (_ready)
    {
        if (Ancestors.Count > 0)
        {
            <div class="flx row rev g-0h ai-c ov-a child-no-shrink mw-100">
                @foreach (var a in Ancestors)
                {
                    <RadzenLink Path="@($"/org/{a.Org}/project/{a.Project}/task/{a.Id}")" class="ellip m-y-0h">@a.Name</RadzenLink>
                    <span>></span>
                }
            </div>
        }
        <div class="flx col jc-s ai-s g-0t w-100 mw-100">
            <RadzenTabs class="w-100 no-x-pad" >
                <Tabs>
                    <RadzenTabsItem Text="@L.S(S.Task)">
                        <RadzenDataGrid
                            Count="Count"
                            Data="Items"
                            TItem="ATask"
                            IsLoading="_isLoading"
                            EmptyText="@L.S(S.OrgNoProjects)"
                            RowClick="RowClick"
                            FilterPopupRenderMode="PopupRenderMode.OnDemand"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            KeyProperty="Id"
                            class="row-clickable"
                            RowRender="RowRender"
                            Style="@($"width: {GridWidth}")">
                            <Columns>
                                <RadzenDataGridColumn Width="22em" TItem="ATask" Property="@nameof(ATask.Name)" Title="@L.S(S.Name)">
                                    <Template Context="t">
                                        <div class="flx jc-s ai-c g-0h w-100 mw-100 p-rel">
                                            @if (t != TheTask)
                                            {
                                                <div class="w-1h"></div>
                                            }
                                            @if (t.IsParallel)
                                            {
                                                <RadzenImage class="w-1h" Path="/image/para.svg"></RadzenImage>
                                            }
                                            else
                                            {
                                                <RadzenImage class="w-1h" Path="/image/seq.svg"></RadzenImage>
                                            }
                                            <span>@t.Name</span>
                                            @if (Ctx.HasProjectWritePerm)
                                            {
                                                <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                                    <RadzenButton @onclick:stopPropagation="true" Icon="add" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall" Click="_ => CreateAfter(t)"/>
                                                    <RadzenButton @onclick:stopPropagation="true" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Disabled="!Ctx.CanDeleteTask(t)" Click="_ => Delete(t)"/>
                                                </div>
                                            }
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="UIDisplay.Time" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.TimeSubMin)" Title="@L.S(S.TimeMin)">
                                    <Template Context="t">
                                        @(Util.Time(t.TimeEst + t.TimeSubMin, Ctx.Project.HoursPerDay, Ctx.Project.DaysPerWeek))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="UIDisplay.Time" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.TimeEst)" Title="@L.S(S.TimeEst)">
                                    <Template Context="t">
                                        @(Util.Time(t.TimeEst + t.TimeSubEst, Ctx.Project.HoursPerDay, Ctx.Project.DaysPerWeek))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="UIDisplay.Time" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.TimeInc)" Title="@L.S(S.TimeInc)">
                                    <Template Context="t">
                                        @(Util.Time(t.TimeInc + t.TimeSubInc, Ctx.Project.HoursPerDay, Ctx.Project.DaysPerWeek))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="UIDisplay.Cost" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.CostEst)" Title="@L.S(S.CostEst)">
                                    <Template Context="t">
                                        @(Util.Cost(t.CostEst + t.CostSubEst, Ctx.Project.CurrencySymbol))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="UIDisplay.Cost" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.CostInc)" Title="@L.S(S.CostInc)">
                                    <Template Context="t">
                                        @(Util.Cost(t.CostInc + t.CostSubInc, Ctx.Project.CurrencySymbol))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="UIDisplay.File" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.FileSize)" Title="@L.S(S.FileSize)">
                                    <Template Context="t">
                                        @(Util.Size(t.FileSize + t.FileSubSize))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="UIDisplay.File" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.FileN)" Title="@L.S(S.FileN)">
                                    <Template Context="t">
                                        @(t.FileN + t.FileSubN)
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="10em" TItem="ATask" Property="@nameof(ATask.CreatedOn)" Title="@L.S(S.CreatedOn)">
                                    <Template Context="t">
                                        @L.D(t.CreatedOn)
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="@L.S(S.Description)">
                        @if (TheTask.Description.IsNullOrWhiteSpace())
                        {
                            <RadzenText TextStyle="TextStyle.Body1" Text="@L.S(S.NothingToSeeHere)"></RadzenText>
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Body1" Text="@TheTask.Description"></RadzenText>
                        }
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="@L.S(S.Time)" Visible="UIDisplay.Time">
                        <RadzenText TextStyle="TextStyle.Body1" Text="TODO TIME"></RadzenText>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="@L.S(S.Cost)" Visible="UIDisplay.Cost">
                        <RadzenText TextStyle="TextStyle.Body1" Text="TODO COST"></RadzenText>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="@L.S(S.File)" Visible="UIDisplay.File">
                        <RadzenText TextStyle="TextStyle.Body1" Text="TODO FILE"></RadzenText>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="@L.S(S.Comment)">
                        <RadzenText TextStyle="TextStyle.Body1" Text="TODO COMMENT"></RadzenText>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </div>
    }
    else
    {
        @L.S(S.Loading)
    }
</div>

@inject L L;
@inject IApi Api;
@inject DialogService DialogService;
@inject UIDisplay UIDisplay;
@inject NavigationManager Nav;
@inject IUICtxService UICtx;
@code{
    
    [CascadingParameter]
    public ISession Session { get; set; } = default!;
    
    [Parameter]
    [EditorRequired]
    public string OrgId { get; set; } = "";
    
    [Parameter]
    [EditorRequired]
    public string ProjectId { get; set; } = "";
    
    [Parameter]
    [EditorRequired]
    public string TaskId { get; set; } = "";

    private UICtx Ctx { get; set; } = new ();

    private bool _ready;
    private List<ATask> Ancestors { get; set; } = new();
    private ATask TheTask { get; set; }
    private int Count => Items.Count; 
    private List<ATask> Items { get; set; } = new ();
    public bool ChildrenMore => Items.Count > 1 && !Items.Last().NextSib.IsNullOrWhiteSpace();
    public List<VItem> Times { get; set; } = new();
    public bool TimesMore { get; set; }
    public List<VItem> Costs { get; set; } = new();
    public bool CostsMore { get; set; }
    public List<File> Files { get; set; } = new();
    public bool FilesMore { get; set; }
    public List<Comment> Comments { get; set; } = new();
    public bool CommentsMore { get; set; }
    private bool _isLoading = false;
    
    private string GridWidth
    {
        get
        {
            var width = 34;
            if (UIDisplay.Time)
            {
                width += 21;
            }
            if (UIDisplay.Cost)
            {
                width += 14;
            }
            if (UIDisplay.File)
            {
                width += 14;
            }
            return $"{width}em";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Ctx = await UICtx.Get();
        var res = await Api.Task.GetInitView(new (OrgId, ProjectId, TaskId));
        Ancestors = res.Ancestors.ToList();
        TheTask = res.Task;
        Items = res.Children.Prepend(TheTask).ToList();
        if (TheTask.TimeInc > 0)
        {
            var timesRes = await Api.VItem.Get(new(OrgId, ProjectId, VItemType.Time, TaskId));
            Times = timesRes.Set.ToList();
            TimesMore = timesRes.More;
        }
        if (TheTask.CostInc > 0)
        {
            var costsRes = await Api.VItem.Get(new(OrgId, ProjectId, VItemType.Cost, TaskId));
            Costs = costsRes.Set.ToList();
            CostsMore = costsRes.More;
        }
        if (TheTask.FileN > 0)
        {
            var fileRes = await Api.File.Get(new(OrgId, ProjectId, TaskId));
            Files = fileRes.Set.ToList();
            FilesMore = fileRes.More;
        }
        Comments = (await Api.Comment.Get(new(OrgId, ProjectId, TaskId))).Set.ToList();
        _ready = true;
        await base.OnParametersSetAsync();
    }

    private void RowClick(DataGridRowMouseEventArgs<ATask> e)
    {
        if (e.Data != TheTask)
        {
            Nav.NavigateTo($"/org/{OrgId}/project/{e.Data.Project}/task/{e.Data.Id}");
        }
    }

    private void RowRender(RowRenderEventArgs<ATask> obj)
    {
        if (obj.Data == TheTask)
        {
            obj.Attributes.Add("class", "task-row");
        }
    }

    private Task CreateAfter(ATask t)
    {
        DialogService.Open<TaskNew>(L.S(S.TaskNewTask), new (){{"OrgId", OrgId}, {"ProjectId", ProjectId}, {"ParentId", TheTask.Id}, {"PrevSibId", t == TheTask? null: t.Id}});
        return Task.CompletedTask;
    }

    private Task Delete(ATask t)
    {
        //DialogService.Open<TaskDelete>(L.S(S.TaskDeleteTask), new (){{"Task", t}});
        return Task.CompletedTask;
    }

}