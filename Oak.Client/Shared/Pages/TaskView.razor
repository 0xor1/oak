@using Common.Client
@using Common.Shared
@using Common.Shared.Auth
@using Oak.Api.Comment
@using Oak.Api.File
@using Oak.Api.Task
@using Oak.Api.VItem
@using Oak.Client.Lib
@using IApi = Oak.Api.IApi
@using ATask = Oak.Api.Task.Task;
@using S = Oak.I18n.S
@using Task = System.Threading.Tasks.Task
@using System.Text
<div class="root col p-0h g-0h jc-s ai-s">
    @if (_ready)
    {
        @if (Ancestors.Any())
        {
            <div class="flx row rev g-0h ai-c ov-a child-no-shrink mw-100">
                @foreach (var a in Ancestors.Take(Ancestors.Count - 1))
                {
                    <RadzenLink Path="@($"/org/{a.Org}/project/{a.Project}/task/{a.Id}")" class="ellip m-y-0h">@a.Name</RadzenLink>
                    <span>></span>
                }
                <RadzenLink Path="@($"/org/{TheTask.Org}/project/{TheTask.Project}/task/{Ancestors.Last().Id}")" class="ellip m-y-0h">@Ancestors.Last().Name</RadzenLink>
            </div>
        }
        @if (MovingTask != null)
        {
            <div class="flx ai-c p-0h g-0h w-100 br-0q bw-0q bs-solid rz-color-secondary-darker rz-background-color-secondary-lighter rz-border-color-secondary-dark b-">
                <RadzenButton title="@L.S(S.Cancel)" @onclick:stopPropagation="true" Icon="cancel" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall" Click="_ => CancelMovingTask()"/>
                <span class="ellip">@L.H(S.TaskMovingTask, MovingTask)</span>
            </div>
        }
        <div class="flx col jc-s ai-s g-0t w-100 mw-100">
            <RadzenTabs @bind-SelectedIndex="_selectedTabIndex" class="w-100 no-x-pad" >
                <Tabs>
                    <RadzenTabsItem Text="@L.S(S.Task)">
                        <RadzenDataGrid
                            @ref="_grid"
                            Count="Count"
                            Data="Items"
                            TItem="ATask"
                            IsLoading="_isLoading"
                            EmptyText="@L.S(S.OrgNoProjects)"
                            RowClick="RowClick"
                            FilterPopupRenderMode="PopupRenderMode.OnDemand"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            KeyProperty="Id"
                            class="row-clickable"
                            RowRender="RowRender"
                            Style="@($"width: {GridWidth}")">
                            <Columns>
                                <RadzenDataGridColumn Width="22em" TItem="ATask" Property="@nameof(ATask.Name)" Title="@L.S(S.Name)">
                                    <Template Context="t">
                                        <div class="flx child-no-shrink jc-s ai-c g-0h w-100 mw-100 p-rel">
                                            @if (t != TheTask)
                                            {
                                                <div class="w-1h"></div>
                                            }
                                            @if (t.IsParallel)
                                            {
                                                <RadzenImage title="@L.S(S.Parallel)" class="w-1h" Path="/image/para.svg"></RadzenImage>
                                            }
                                            else
                                            {
                                                <RadzenImage title="@L.S(S.Sequential)" class="w-1h" Path="/image/seq.svg"></RadzenImage>
                                            }
                                            <span title="@($"{t.Name}\n\n{t.Description}")" class="shrink-1 ellip">@t.Name</span>
                                            @if (Ctx.HasProjectWritePerm)
                                            {
                                                <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                                    @if (MovingTask == null)
                                                    {
                                                        <RadzenButton @onclick:stopPropagation="true" Icon="keyboard_arrow_down" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall" Click="_ => CreateAfter(t)"/>
                                                        <RadzenButton @onclick:stopPropagation="true" Icon="edit" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.ExtraSmall" Click="_ => Update(t)"/>
                                                        <RadzenButton @onclick:stopPropagation="true" Disabled="@(t.Project == t.Id)" Icon="open_with" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall" Click="_ => Pickup(t)"/>
                                                        <RadzenButton @onclick:stopPropagation="true" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Disabled="!Ctx.CanDeleteTask(t)" Click="_ => Delete(t)"/>
                                                    }
                                                    else
                                                    {
                                                        <RadzenButton @onclick:stopPropagation="true" Icon="keyboard_arrow_left" Disabled="@(TheTask.Id == t.Id || MovingTask.Id == t.Id)" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall" Click="_ => DropIn(t)"/>
                                                        <RadzenButton @onclick:stopPropagation="true" Icon="keyboard_arrow_down" Disabled="@(MovingTask.Id == t.Id)" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall" Click="_ => DropAfter(t)"/>
                                                        <RadzenButton title="@L.S(S.Cancel)" @onclick:stopPropagation="true" Icon="cancel" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall" Click="_ => CancelMovingTask()"/>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="Ctx.Display.User" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="10em" TItem="ATask" Property="@nameof(ATask.User)" Title="@L.S(S.User)">
                                    <Template Context="t">
                                        <User OrgId="@t.Org" UserId="@t.User"/>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="Ctx.Display.Time" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.TimeSubMin)" Title="@L.S(S.TimeMin)">
                                    <Template Context="t">
                                        @(Util.Duration(Ctx.Project, t.TimeEst + t.TimeSubMin))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="Ctx.Display.Time" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.TimeEst)" Title="@L.S(S.TimeEst)">
                                    <Template Context="t">
                                        @(Util.Duration(Ctx.Project, t.TimeEst + t.TimeSubEst))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="Ctx.Display.Time" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.TimeInc)" Title="@L.S(S.TimeInc)">
                                    <Template Context="t">
                                        <div class="flx child-no-shrink jc-c ai-c g-0h w-100 mw-100 p-rel">
                                            <span>
                                                @(Util.Duration(Ctx.Project, t.TimeInc + t.TimeSubInc))
                                            </span>
                                            @if (Ctx.HasProjectWritePerm && MovingTask == null)
                                            {
                                                <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                                    <RadzenButton @onclick:stopPropagation="true" Icon="more_time" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall" Click="_ => NewVItem(VItemType.Time, t)"/>
                                                </div>
                                            }
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="Ctx.Display.Cost" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.CostEst)" Title="@L.S(S.CostEst)">
                                    <Template Context="t">
                                        @(Util.Cost(Ctx.Project, t.CostEst + t.CostSubEst))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="Ctx.Display.Cost" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.CostInc)" Title="@L.S(S.CostInc)">
                                    <Template Context="t">
                                        <div class="flx child-no-shrink jc-c ai-c g-0h w-100 mw-100 p-rel">
                                            <span>
                                                @(Util.Cost(Ctx.Project, t.CostInc + t.CostSubInc))
                                            </span>
                                            @if (Ctx.HasProjectWritePerm && MovingTask == null)
                                            {
                                                <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                                    <RadzenButton @onclick:stopPropagation="true" Icon="paid" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall" Click="_ => NewVItem(VItemType.Cost, t)"/>
                                                </div>
                                            }
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="Ctx.Display.File" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.FileSize)" Title="@L.S(S.FileSize)">
                                    <Template Context="t">
                                        @(Util.Size(t.FileSize + t.FileSubSize))
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="Ctx.Display.File" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.FileN)" Title="@L.S(S.FileN)">
                                    <Template Context="t">
                                        <div class="flx child-no-shrink jc-c ai-c g-0h w-100 mw-100 p-rel">
                                            <span>
                                                @(t.FileN + t.FileSubN)
                                            </span>
                                            @if (Ctx.HasProjectWritePerm && MovingTask == null)
                                            {
                                                <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                                    <RadzenButton @onclick:stopPropagation="true" Icon="file_upload" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall" Click="_ => UploadFile(t)"/>
                                                </div>
                                            }
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Visible="Ctx.Display.SubCounts" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.ChildN)" Title="@L.S(S.ChildN)"/>
                                <RadzenDataGridColumn Visible="Ctx.Display.SubCounts" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="ATask" Property="@nameof(ATask.DescN)" Title="@L.S(S.DescN)"/>
                                <RadzenDataGridColumn Visible="Ctx.Display.CreatedOn" TextAlign="TextAlign.Center" Width="10em" TItem="ATask" Property="@nameof(ATask.CreatedOn)" Title="@L.S(S.CreatedOn)">
                                    <Template Context="t">
                                        @L.D(t.CreatedOn)
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                        @if (TheTask.Description.IsNullOrWhiteSpace())
                        {
                            <RadzenText TextStyle="TextStyle.Body1" Text="@L.S(S.NoDescription)"></RadzenText>
                        }
                        else
                        {
                            <RadzenText TextStyle="TextStyle.Body1" Text="@TheTask.Description"></RadzenText>
                        }
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="@L.S(S.Time)" Visible="Ctx.Display.Time">
                        <VItemTab Type="VItemType.Time" OnChange="OnSubItemChange"></VItemTab>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="@L.S(S.Cost)" Visible="Ctx.Display.Cost">
                        <VItemTab Type="VItemType.Cost" OnChange="OnSubItemChange"></VItemTab>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="@L.S(S.File)" Visible="Ctx.Display.File">
                        <FileTab OnChange="OnSubItemChange"></FileTab>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="@L.S(S.Comment)">
                        <RadzenText TextStyle="TextStyle.Body1" Text="TODO COMMENT"></RadzenText>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </div>
    }
    else
    {
        @L.S(S.Loading)
    }
</div>

@inject L L;
@inject IApi Api;
@inject DialogService DialogService;
@inject NavigationManager Nav;
@inject UiCtx Ctx;
@code{
    
    [CascadingParameter]
    public ISession Session { get; set; } = default!;
    
    [Parameter]
    [EditorRequired]
    public string OrgId { get; set; } = "";
    
    [Parameter]
    [EditorRequired]
    public string ProjectId { get; set; } = "";
    
    [Parameter]
    [EditorRequired]
    public string TaskId { get; set; } = "";

    private bool _ready;
    private List<ATask> Ancestors { get; set; } = new();
    private ATask _theTask;
    private ATask TheTask { 
        get => _theTask;
        set
        {
            _theTask = value;
            if (Items.Count > 0)
            {
                Items[0] = value;
            }
            else
            {
                Items.Add(value);
            }
        }
    }
    private int Count => Items.Count; 
    private List<ATask> Items { get; set; } = new ();
    public bool ChildrenMore => Items.Count > 1 && !Items.Last().NextSib.IsNullOrWhiteSpace();
    private bool _isLoading = false;
    private RadzenDataGrid<ATask>? _grid;
    private ATask? MovingTask { get; set; }
    private int _selectedTabIndex = 0;

    private string GridWidth
    {
        get
        {
            var width = 34;
            if (Ctx.Display.User)
            {
                width += 10;
            }
            if (Ctx.Display.Time)
            {
                width += 21;
            }
            if (Ctx.Display.Cost)
            {
                width += 14;
            }
            if (Ctx.Display.File)
            {
                width += 14;
            }
            if (Ctx.Display.SubCounts)
            {
                width += 14;
            }
            if (Ctx.Display.CreatedOn)
            {
                width += 7;
            }
            return $"{width}em";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (TheTask?.Id != TaskId)
        {
            _selectedTabIndex = 0;
            var res = await Api.Task.GetInitView(new (OrgId, ProjectId, TaskId));
            await Ctx.Set(res.Task);
            Ancestors = res.Ancestors.ToList();
            TheTask = res.Task;
            Items = res.Children.Prepend(TheTask).ToList();
            if (MovingTask != null && MovingTask.Project != Ctx.ProjectId)
            {
                MovingTask = null;
            }
        }
        _ready = true;
        await base.OnParametersSetAsync();
    }

    private void RowClick(DataGridRowMouseEventArgs<ATask> e)
    {
        if (e.Data != TheTask)
        {
            Nav.NavigateTo($"/org/{OrgId}/project/{e.Data.Project}/task/{e.Data.Id}");
        }
    }

    private void RowRender(RowRenderEventArgs<ATask> obj)
    {
        if (obj.Data == TheTask && obj.Data == MovingTask)
        {
            obj.Attributes.Add("class", "task-row moving-task");
        }
        else if (obj.Data == TheTask)
        {
            obj.Attributes.Add("class", "task-row");
        }
        else if (obj.Data == MovingTask)
        {
            obj.Attributes.Add("class", "moving-task");
        }
    }

    private async Task NewVItem(VItemType Type, ATask t) => await DialogService.OpenAsync<VItemNewOrUpdate>(L.S(Type == VItemType.Time? S.TaskNewTime: S.TaskNewCost), new (){{"Type", Type}, {"SubTask", t}, {"OnCreated", OnVItemCreated}});

    private async Task OnVItemCreated(VItemRes res)
    {
        var i = Items.FindIndex(x => x.Id == res.Task.Id);
        
        if (i == 0)
        {
            TheTask = res.Task;
        }
        else if (i > -1)
        {
            // if we added to a sub task we need to refresh the current task we're looking at too.
            Items[i] = res.Task;
            TheTask = await Api.Task.GetOne(new (OrgId, ProjectId, TaskId));
        }
        await Ctx.Set(TheTask);
        await _grid.Reload();
    }
    
    private async Task UploadFile(ATask t) => await Task.CompletedTask;
    
    private async Task CreateAfter(ATask t)
        => await DialogService.OpenAsync<TaskNewOrUpdate>(L.S(S.TaskNewTask), new (){{"OrgId", OrgId}, {"ProjectId", ProjectId}, {"ParentId", TheTask.Id}, {"PrevSib", t == TheTask? null: t}, {"OnCreated", OnCreated}});


    private async Task Update(ATask t)
        => await DialogService.OpenAsync<TaskNewOrUpdate>(L.S(S.TaskUpdateTask), new (){{"OrgId", OrgId}, {"ProjectId", ProjectId}, {"ParentId", TheTask.Id}, {"PrevSib", t == TheTask? null: t}, {"UpdateTask", t}, {"OnUpdated", OnUpdated}});

    private void CancelMovingTask()
        => MovingTask = null;
    
    private void Pickup(ATask t)
        => MovingTask = t;

    private async Task DropIn(ATask t)
    {
        if (MovingTask != null)
        {
            var res = await Api.Task.Update(new(t.Org, t.Project, MovingTask.Id, t.Id, new(null)));
            if (res.OldParent?.Id == TheTask.Id)
            {
                TheTask = res.OldParent;
                await Ctx.Set(TheTask);
            }
            Items.Remove(MovingTask);
            var newParentI = Items.FindIndex(x => x.Id == t.Id);
            Items[newParentI] = res.NewParent.NotNull();
            MovingTask = null;
            await _grid.Reload();
        }
    }

    private async Task DropAfter(ATask t)
    {
        if (MovingTask != null)
        {
            var res = await Api.Task.Update(new(t.Org, t.Project, MovingTask.Id, TheTask.Id, TheTask.Id == t.Id ? new(null) : new(t.Id)));
            if (res.OldParent?.Id == TheTask.Id)
            {
                TheTask = res.OldParent;
                await Ctx.Set(TheTask);
            }
            if (res.NewParent?.Id == TheTask.Id)
            {
                TheTask = res.NewParent;
                await Ctx.Set(TheTask);
                // old parent might be in this list
                res.OldParent.NotNull();
                var oldParentI = Items.FindIndex(x => x.Id == res.OldParent.Id);
                if (oldParentI > -1)
                {
                    Items[oldParentI] = res.OldParent;
                }
            }
            Items.Remove(MovingTask);
            var prevI = Items.FindIndex(x => x.Id == t.Id);
            Items.Insert(prevI + 1, res.Task);
            MovingTask = null;
            await _grid.Reload();
        }
    }

    private async Task OnCreated(CreateRes res, ATask? prevSib)
    {
        // a new task was created
        // so refresh TheTask and insert new task in appropriate index
        TheTask = res.Parent;
        await Ctx.Set(TheTask);
        if (prevSib == null)
        {
            Items.Insert(1, res.New);
        }
        else
        {
            var i = Items.IndexOf(prevSib);
            Items[i] = prevSib with {NextSib = res.New.Id};
            Items.Insert(i+1, res.New);
        }
        await _grid.Reload();
    }
    
    private async Task OnUpdated(UpdateRes res)
    {
        if (TheTask.Id == res.Task.Id)
        {
            TheTask = res.Task;
            await Ctx.Set(TheTask);
        }
        else
        {
            if (res.OldParent != null)
            {
                TheTask = res.OldParent;
                await Ctx.Set(TheTask);
            }
            var i = Items.FindIndex(x => x.Id == res.Task.Id);
            Items[i] = res.Task;
        }
        await _grid.Reload();
    }

    private async Task Delete(ATask t)
    {
        var confirmed = await DialogService.Confirm(L.S(S.TaskConfirmDeleteTask, t), L.S(S.Confirm), new ConfirmOptions() { OkButtonText = L.S(S.Delete), CancelButtonText = L.S(S.Cancel) });
        if (confirmed == true)
        {
            var parent = await Api.Task.Delete(new(t.Org, t.Project, t.Id));
            if (t == TheTask)
            {
                // if we deleted the task we're looking at then move up to parent,
                Nav.NavigateTo($"/org/{t.Org}/project/{t.Project}/task/{t.Parent.NotNull()}");
            }
            else
            {
                // else just refresh the current view
                Items.Remove(t);
                TheTask = parent;
                await Ctx.Set(TheTask);
                await _grid.Reload();
            }
        }
    }

    private async Task OnSubItemChange(ATask t)
    {
        TheTask = t;
        await Ctx.Set(TheTask);
    }
}