@using Common.Client
@using Common.Shared
@using Common.Shared.Auth
@using Oak.Api.Org
@using Oak.Api.OrgMember
@using Oak.Api.Project
@using Oak.Client.Lib
@using IApi = Oak.Api.IApi
@using S = Oak.I18n.S

<div class="root col p-0h g-0h jc-s ai-s">
    <RadzenText class="m-t-0" TextStyle="TextStyle.H2">@L.S(S.OrgProjects)</RadzenText>
    <RadzenButton class="m-b-1" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="@L.S(S.New)" Click="@OpenNewDialog"/>
    <RadzenDataGrid
        @ref="_grid"
        Count="Count"
        Data="Items"
        TItem="Project"
        IsLoading="_isLoading"
        EmptyText="@L.S(S.OrgNoProjects)"
        RowClick="RowClick"
        FilterPopupRenderMode="PopupRenderMode.OnDemand" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        AllowSorting="true" 
        AllowFiltering="true"
        AllowPaging="true"
        LoadData="LoadData"
        KeyProperty="Id"
        class="row-clickable"
        Style="@($"width: {GridWidth}")">
        <Columns>
            <RadzenDataGridColumn Sortable="true" Width="18em" TItem="Project" Property="@nameof(Project.Name)" Title="@L.S(S.Name)" FilterValue="@NameStartsWith">
                <Template Context="p">
                    <div class="flx child-no-shrink jc-s ai-c g-0h w-100 mw-100 p-rel">
                        <span title="@($"{p.Name}\n\n{p.Task.Description}")" class="shrink-1 ellip">@p.Name</span>
                        @if (Ctx.HasOrgAdminPerm)
                        {
                            <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                <RadzenButton @onclick:stopPropagation="true" Icon="edit" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.ExtraSmall" Click="_ => Update(p)"/>
                                <RadzenButton @onclick:stopPropagation="true" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Click="_ => Delete(p)"/>
                            </div>
                        }
                    </div>
                </Template>
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@NameStartsWith" Style="width:100%"/>
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Sortable="false" TextAlign="TextAlign.Center" Width="8em" TItem="Project" Property="@nameof(Project.IsPublic)" Title="@L.S(S.Public)" FilterValue="@IsPublic">
                <Template Context="p">
                    <RadzenCheckBox Disabled="true" Value="p.IsPublic"></RadzenCheckBox>
                </Template>
                <FilterTemplate>
                    <BoolDataGridFilter @bind-Value="@IsPublic" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.User" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="10em" TItem="Project" Property="@nameof(Project.Task.User)" Title="@L.S(S.User)">
                <Template Context="p">
                    <User OrgId="@p.Org" UserId="@p.Task.User"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.Time" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.TimeSubMin)" Title="@L.S(S.TimeMin)">
                <Template Context="p">
                    @(Util.Duration(p, p.Task.TimeEst + p.Task.TimeSubMin))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.Time" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.TimeEst)" Title="@L.S(S.TimeEst)">
                <Template Context="p">
                    @(Util.Duration(p, p.Task.TimeEst + p.Task.TimeSubEst))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.Time" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.TimeInc)" Title="@L.S(S.TimeInc)">
                <Template Context="p">
                    @(Util.Duration(p, p.Task.TimeInc + p.Task.TimeSubInc))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.Cost" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.CostEst)" Title="@L.S(S.CostEst)">
                <Template Context="p">
                    @(Util.Cost(p, p.Task.CostEst + p.Task.CostSubEst))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.Cost" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.CostInc)" Title="@L.S(S.CostInc)">
                <Template Context="p">
                    @(Util.Cost(p, p.Task.CostInc + p.Task.CostSubInc))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.File" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.FileSize)" Title="@L.S(S.FileSize)">
                <Template Context="p">
                    @(Util.Size(p.Task.FileSize + p.Task.FileSubSize))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.File" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.FileN)" Title="@L.S(S.FileN)">
                <Template Context="p">
                    @(p.Task.FileN + p.Task.FileSubN)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.SubCounts" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.ChildN)" Title="@L.S(S.ChildN)">
                <Template Context="p">
                    @(p.Task.ChildN)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.SubCounts" Sortable="false" Filterable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.DescN)" Title="@L.S(S.DescN)">
                <Template Context="p">
                    @(p.Task.DescN)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Sortable="true" TextAlign="TextAlign.Center" Width="10em" TItem="Project" Property="@nameof(Project.StartOn)" Title="@L.S(S.StartOn)" FilterValue="@StartOn">
                <Template Context="p">
                    @(p.StartOn == null? "--": L.D(p.StartOn.Value))
                </Template>
                <FilterTemplate>
                    <MinMaxDateDataGridFilter @bind-Value="@StartOn" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Sortable="true" TextAlign="TextAlign.Center" Width="10em" TItem="Project" Property="@nameof(Project.EndOn)" Title="@L.S(S.EndOn)" FilterValue="@EndOn">
                <Template Context="p">
                    @(p.EndOn == null ? "--" : L.D(p.EndOn.Value))
                </Template>
                <FilterTemplate>
                    <MinMaxDateDataGridFilter @bind-Value="@EndOn" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.CreatedOn" Sortable="true" TextAlign="TextAlign.Center" Width="10em" TItem="Project" Property="@nameof(Project.CreatedOn)" Title="@L.S(S.CreatedOn)" FilterValue="@CreatedOn">
                <Template Context="p">
                    @L.D(p.CreatedOn)
                </Template>
                <FilterTemplate>
                    <MinMaxDateDataGridFilter @bind-Value="@CreatedOn" />
                </FilterTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@inject L L;
@inject IApi Api;
@inject NavigationManager Nav;
@inject DialogService DialogService;
@inject UiCtx Ctx;
@code{

    [CascadingParameter]
    public ISession Session { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public string OrgId { get; set; } = "";

    private string? NameStartsWith { get; set; }
    private bool? IsPublic { get; set; }
    private MinMax<DateTime>? StartOn { get; set; }
    private MinMax<DateTime>? EndOn { get; set; }
    private MinMax<DateTime>? CreatedOn { get; set; }
    private int Count => Items.Count; 
    private List<Project> Items { get; set; } = new ();
    private bool _isLoading = false;
    private RadzenDataGrid<Project> _grid;

    private string GridWidth
    {
        get
        {
            var width = 50;
            if (Ctx.Display.User)
            {
                width += 10;
            }
            if (Ctx.Display.Time)
            {
                width += 21;
            }
            if (Ctx.Display.Cost)
            {
                width += 14;
            }
            if (Ctx.Display.File)
            {
                width += 14;
            }
            if (Ctx.Display.SubCounts)
            {
                width += 14;
            }
            if (Ctx.Display.CreatedOn)
            {
                width += 7;
            }
            return $"{width}em";
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        try
        {
            await Ctx.Set(await Api.Org.GetOne(new(OrgId)));
            var res = await Api.Project.Get(new(OrgId));
            Items = res.Set.ToList();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenNewDialog()
        => await DialogService.OpenAsync<ProjectNewOrUpdate>(L.S(S.OrgNewProject), new (){{"OrgId", OrgId}, {"Session", Session}});

    private void RowClick(DataGridRowMouseEventArgs<Project> e)
    {
        Nav.NavigateTo($"/org/{OrgId}/project/{e.Data.Id}/task/{e.Data.Id}");
    }

    private async Task LoadData(LoadDataArgs arg)
    {
        _isLoading = true;
        try
        {
            var orderBy = ProjectOrderBy.Name;
            var asc = true;
            if (arg.Sorts.Count() == 1)
            {
                var sort = arg.Sorts.Single();
                orderBy = sort.Property switch
                {
                    nameof(Project.Name) => ProjectOrderBy.Name,
                    nameof(Project.CreatedOn) => ProjectOrderBy.CreatedOn,
                    nameof(Project.StartOn) => ProjectOrderBy.StartOn,
                    nameof(Project.EndOn) => ProjectOrderBy.EndOn,
                    _ => throw new InvalidDataException($"unknown sort property {sort.Property}")
                };
                asc = sort.SortOrder switch {
                    null => true,
                    SortOrder.Ascending => true,
                    SortOrder.Descending => false
                };
            }
            if (NameStartsWith.IsNullOrWhiteSpace())
            {
                NameStartsWith = null;
            }
            var res = await Api.Project.Get(new(OrgId, IsPublic, NameStartsWith, CreatedOn, StartOn, EndOn, false, null, orderBy, asc));
            Items = res.Set.ToList();
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task Update(Project p)
        => await DialogService.OpenAsync<ProjectNewOrUpdate>(L.S(S.OrgUpdateProject), new (){{"OrgId", OrgId}, {"UpdateProject", p}, {"Session", Session}, {"OnUpdated", OnUpdated}});

    private async Task OnUpdated(Project p)
    {
        var i = Items.FindIndex(x => x.Id == p.Id);
        Items[i] = p;
        await _grid.Reload();
    }

    private async Task Delete(Project p)
    {
        var confirmed = await DialogService.Confirm(L.S(S.OrgConfirmDeleteProject, p), L.S(S.Confirm), new ConfirmOptions() { OkButtonText = L.S(S.Delete), CancelButtonText = L.S(S.Cancel) });
        if (confirmed == true)
        {
            await Api.Project.Delete(new(p.Org, p.Id));
            Items.Remove(p);
            await _grid.Reload();
        }
    }
}