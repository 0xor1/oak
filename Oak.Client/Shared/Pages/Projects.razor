@using Common.Client
@using Common.Shared
@using Common.Shared.Auth
@using Oak.Api.Org
@using Oak.Api.OrgMember
@using Oak.Api.Project
@using Oak.Client.Lib
@using IApi = Oak.Api.IApi
@using S = Oak.I18n.S

<div class="root col p-0h g-0h jc-s ai-s">
    <RadzenText class="m-t-0" TextStyle="TextStyle.H2">@L.S(S.OrgProjects)</RadzenText>
    <RadzenButton class="m-b-1" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="@L.S(S.New)" Click="@OpenNewDialog"/>
    <RadzenDataGrid
        @ref="_grid"
        Count="Count"
        Data="Items"
        TItem="Project"
        IsLoading="_isLoading"
        EmptyText="@L.S(S.OrgNoProjects)"
        RowClick="RowClick"
        FilterPopupRenderMode="PopupRenderMode.OnDemand" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        AllowSorting="true" 
        AllowFiltering="true"
        LoadData="LoadData"
        class="row-clickable"
        Style="width: 86em">
        <Columns>
            <RadzenDataGridColumn Sortable="true" Width="18em" TItem="Project" Property="@nameof(Project.Name)" Title="@L.S(S.Name)" FilterValue="@NameStartsWith">
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@NameStartsWith" Style="width:100%"/>
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="8em" TItem="Project" Property="@nameof(Project.IsPublic)" Title="@L.S(S.Public)" FilterValue="@IsPublic">
                <Template Context="p">
                    <RadzenCheckBox Disabled="true" Value="p.IsPublic"></RadzenCheckBox>
                </Template>
                <FilterTemplate>
                    <BoolDataGridFilter @bind-Value="@IsPublic" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.TimeEst)" Title="@L.S(S.TimeEst)">
                <Template Context="p">
                    @(Util.Time(p.Task.TimeEst, p.HoursPerDay, p.DaysPerWeek))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.TimeInc)" Title="@L.S(S.TimeInc)">
                <Template Context="p">
                    @(Util.Time(p.Task.TimeInc, p.HoursPerDay, p.DaysPerWeek))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.CostEst)" Title="@L.S(S.CostEst)">
                <Template Context="p">
                    @(Util.Cost(p.Task.CostEst, p.CurrencySymbol))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="Project" Property="@nameof(Project.Task.CostInc)" Title="@L.S(S.CostInc)">
                <Template Context="p">
                    @(Util.Cost(p.Task.CostInc, p.CurrencySymbol))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Sortable="true" TextAlign="TextAlign.Center" Width="10em" TItem="Project" Property="@nameof(Project.StartOn)" Title="@L.S(S.StartOn)">
                <Template Context="p">
                    @(p.StartOn == null? "--": L.D(p.StartOn.Value))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Sortable="true" TextAlign="TextAlign.Center" Width="10em" TItem="Project" Property="@nameof(Project.EndOn)" Title="@L.S(S.EndOn)">
                <Template Context="p">
                    @(p.EndOn == null ? "--" : L.D(p.EndOn.Value))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Sortable="true" TextAlign="TextAlign.Center" Width="10em" TItem="Project" Property="@nameof(Project.CreatedOn)" Title="@L.S(S.CreatedOn)">
                <Template Context="p">
                    @L.D(p.CreatedOn)
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@inject L L;
@inject IApi Api;
@inject NavigationManager Nav;
@inject DialogService DialogService;
@code{

    [CascadingParameter]
    public ISession Session { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public string OrgId { get; set; } = "";

    private bool? IsPublic { get; set; }
    private string? NameStartsWith { get; set; }
    RadzenDataGrid<Project> _grid = default!;
    private int Count => Items.Count; 
    private List<Project> Items { get; set; } = new ();
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            var res = await Api.Project.Get(new(OrgId));
            Items = res.Set.ToList();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void OpenNewDialog()
    {
        DialogService.Open<ProjectNew>(L.S(S.OrgNewProject), new (){{"OrgId", OrgId}, {"Session", Session}});
    }

    private void RowClick(DataGridRowMouseEventArgs<Project> e)
    {
        Nav.NavigateTo($"/org/{OrgId}/project/{e.Data.Id}/task/{e.Data.Id}");
    }

    private async Task LoadData(LoadDataArgs arg)
    {
        _isLoading = true;
        try
        {
            var orderBy = ProjectOrderBy.Name;
            var asc = true;
            if (arg.Sorts.Count() == 1)
            {
                var sort = arg.Sorts.Single();
                orderBy = sort.Property switch
                {
                    nameof(Project.Name) => ProjectOrderBy.Name,
                    nameof(Project.CreatedOn) => ProjectOrderBy.CreatedOn,
                    nameof(Project.StartOn) => ProjectOrderBy.StartOn,
                    nameof(Project.EndOn) => ProjectOrderBy.EndOn,
                    _ => throw new InvalidDataException($"unknown sort property {sort.Property}")
                };
                asc = sort.SortOrder switch {
                    null => true,
                    SortOrder.Ascending => true,
                    SortOrder.Descending => false
                };
            }
            if (NameStartsWith.IsNullOrWhiteSpace())
            {
                NameStartsWith = null;
            }
            var res = await Api.Project.Get(new(OrgId, NameStartsWith: NameStartsWith, IsPublic: IsPublic, OrderBy: orderBy, Asc: asc));
            Items = res.Set.ToList();
        }
        finally
        {
            _isLoading = false;
        }
    }

}