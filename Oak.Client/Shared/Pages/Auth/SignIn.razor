@using Oak.Client.Lib
@using System.Text.RegularExpressions
@using Common.Client
@using Common.Shared
@using Oak.I18n
@using AuthValidator = Common.Client.AuthValidator
<div class="root jc-c ai-c">
    <RadzenCard class="p-3 w-25">
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
            @L.S(S.SignIn)
        </RadzenText>
        <RadzenTemplateForm
            TItem="Model"
            Data="_model"
            Submit="Do"
            class="flx col ai-stretch g-1">
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Email" Text="@L.S(S.Email)"/>
                <RadzenTextBox Name="Email" @bind-Value="@_model.Email"/>
                <RadzenCustomValidator Validator="EmailValidator" Component="Email" Popup="true"></RadzenCustomValidator>
            </div>
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Password" Text="@L.S(S.Pwd)"/>
                <RadzenPassword Name="Password" @bind-Value="@_model.Pwd"/>
                <RadzenCustomValidator Validator="PwdValidator" Component="Password" Popup="true"></RadzenCustomValidator>
            </div>
            <div class="flx g-0h">
                <RadzenCheckBox Name="RememberMe" @bind-Value="@_model.RememberMe"/>
                <RadzenLabel class="m-b-0q" Component="RememberMe" Text="@L.S(S.RememberMe)"/>
            </div>
            <RadzenButton ButtonType="ButtonType.Submit" BusyText="@L.S(S.SigningIn)" IsBusy="_doing" Text="@L.S(S.SignIn)"/>
            <div class="flx jc-sb">
                <RadzenLink Path="register" Text="@L.S(S.Register)"></RadzenLink>
                <RadzenLink Path="send_reset_pwd_email" Text="@L.S(S.ResetPwd)"></RadzenLink>
            </div>
        </RadzenTemplateForm>
    </RadzenCard>
</div>

@inject NavigationManager Nav;
@inject IAuthService Auth;
@inject L L;
@code{

    class Model
    {
        public string Email { get; set; } = "";
        public string Pwd { get; set; } = "";
        public bool RememberMe { get; set; } = false;
    }

    private Model _model = new ();

    private bool _doing = false;

    private async Task Do()
    {
        _doing = true;
        try
        {
            await Auth.SignIn(_model.Email, _model.Pwd, _model.RememberMe);
            Nav.NavigateTo("/");
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
    }

    private ValidationResult EmailValidator(IRadzenFormComponent component)
        => AuthValidator.EmailValidator(component);

    private ValidationResult PwdValidator(IRadzenFormComponent component)
        => AuthValidator.PwdValidator(component);
}