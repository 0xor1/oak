@using System.Text.RegularExpressions
@using Common.Client
@using Common.Shared
@using Common.Shared.Auth
@using S = Oak.I18n.S
@using AuthValidator = Common.Client.AuthValidator
<div class="root jc-c ai-c">
    <RadzenCard class="p-3 w-25">
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
            @L.S(S.Register)
        </RadzenText>
        @if (_success)
        {
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-b-1 f-b rz-color-success-light">
                @L.S(S.RegisterSuccess)
            </RadzenText>
        }
        else
        {
            <RadzenTemplateForm
                TItem="Model"
                Data="_model"
                Submit="Do"
                class="flx col ai-stretch g-1">
                <div class="flx col ai-stretch">
                    <RadzenLabel class="m-b-0q" Component="Email" Text="@L.S(S.Email)"/>
                    <RadzenTextBox Name="Email" @bind-Value="@_model.Email" Disabled="!CanDo"/>
                    <RadzenCustomValidator Validator="EmailValidator" Component="Email" Popup="true"></RadzenCustomValidator>
                </div>
                <div class="flx col ai-stretch">
                    <RadzenLabel class="m-b-0q" Component="Password" Text="@L.S(S.Pwd)"/>
                    <RadzenPassword Name="Password" @bind-Value="@_model.Pwd" Disabled="!CanDo"/>
                    <RadzenCustomValidator Validator="PwdValidator" Component="Password" Popup="true"></RadzenCustomValidator>
                </div>
                <div class="flx col ai-stretch">
                    <RadzenLabel class="m-b-0q" Component="ConfirmPassword" Text="@L.S(S.ConfirmPwd)"/>
                    <RadzenPassword Name="ConfirmPassword" @bind-Value="@_model.ConfirmPwd" Disabled="!CanDo"/>
                    <RadzenCustomValidator Validator="ConfirmPasswordValidator" Component="ConfirmPassword" Popup="true"></RadzenCustomValidator>
                </div>
                <RadzenButton ButtonType="ButtonType.Submit" BusyText="@L.S(S.Registering)" IsBusy="_doing" Text="@L.S(S.Register)" Disabled="!CanDo"/>
                <RadzenLink Path="sign_in" Text="@L.S(S.SignIn)"></RadzenLink>
            </RadzenTemplateForm>
        }
    </RadzenCard>
</div>

@inject IAuthService Auth;
@inject L L;
@code{

    class Model
    {
        public string Email { get; set; } = "";
        public string Pwd { get; set; } = "";
        public string ConfirmPwd { get; set; } = "";
    }

    private bool CanDo => _session.IsAnon && !_doing && !_success;

    private ISession _session = Session.Default(S.DefaultLang, S.DefaultDateFmt, S.DefaultTimeFmt); 
    private Model _model = new (); 
    private bool _doing = false;
    private bool _success = false;

    protected override async Task OnInitializedAsync()
    {
        _session = await Auth.GetSession();
    }

    private async Task Do()
    {
        _doing = true;
        try
        {
            await Auth.Register(_model.Email, _model.Pwd);
            _success = true;
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
        
    }

    private ValidationResult EmailValidator(IRadzenFormComponent component)
        => AuthValidator.EmailValidator(component);

    private ValidationResult PwdValidator(IRadzenFormComponent component)
        => AuthValidator.PwdValidator(component);

    private ValidationResult ConfirmPasswordValidator(IRadzenFormComponent component)
        => new ()
        {
            Valid = (component.GetValue() as string ?? "") == _model.Pwd,
            Message = new (S.PwdsDontMatch)
        };
}