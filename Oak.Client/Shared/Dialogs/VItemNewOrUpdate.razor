@using Common.Client
@using Common.Shared
@using Oak.Api
@using Oak.Api.VItem
@using Oak.Client.Lib
@using S = Oak.I18n.S
<div class="root col">
    <RadzenTemplateForm
        TItem="Model"
        Data="_model"
        Submit="Do"
        class="flx col ai-stretch g-1">
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Note" Text="@L.S(S.Note)"/>
            <RadzenTextBox Name="Note" @bind-Value="@_model.Note"/>
            <RadzenRequiredValidator Component="Note" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        @if (UpdateVItem == null)
        {
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Est" Text="@L.S(InternalType == VItemType.Time ? S.TimeEst : S.CostEst)"/>
                @if (InternalType == VItemType.Time)
                {
                    <DurationInput Name="Est" @bind-Value="_model.Est"/>
                }
                else
                {
                    <CurrencyInput Name="Est" @bind-Value="_model.Est"/>
                }
            </div>
        }
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Inc" Text="@L.S(InternalType == VItemType.Time? S.TimeInc: S.CostInc)"/>
            @if (InternalType == VItemType.Time)
            {
                <DurationInput Name="Inc" @bind-Value="_model.Inc"/>
            }
            else
            {
                <CurrencyInput Name="Inc" @bind-Value="_model.Inc"/>
            }
        </div>
        <div class="flx g-0h jc-stretch">
            <RadzenButton ButtonType="ButtonType.Submit" IsBusy="_doing" Text="@(UpdateVItem != null? L.S(S.Update): L.S(S.Create))"/>
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" IsBusy="_doing" Text="@L.S(S.Cancel)" Click="@(_ => DialogService.Close())"/>
        </div>
    </RadzenTemplateForm>
</div>

@inject L L;
@inject IApi Api;
@inject UICtx Ctx;
@inject DialogService DialogService;
@code {

    [Parameter]
    public VItemType? Type { get; set; }
    
    [Parameter]
    public VItem? UpdateVItem { get; set; }

    [Parameter]
    public Func<VItemRes, Task>? OnCreated { get; set; }

    [Parameter]
    public Func<VItemRes, Task>? OnUpdated { get; set; }

    private VItemType InternalType => Type ?? UpdateVItem.NotNull().Type;

    public class Model
    {
        public string Note { get; set; } = "";
        public ulong Est { get; set; }
        public ulong Inc { get; set; }
    }

    Model _model = new();
    private bool _doing;

    protected override Task OnInitializedAsync()
    {
        if (UpdateVItem != null)
        {
            _model.Note = UpdateVItem.Note;
            _model.Inc = UpdateVItem.Inc;
        }
        _model.Est = InternalType == VItemType.Time ? Ctx.Task.TimeEst : Ctx.Task.CostEst;
        return Task.CompletedTask;
    }
    
    private async Task Do()
    {
        _doing = true;
        try
        {
            if (UpdateVItem == null)
            {
                var res = await Api.VItem.Create(new(Ctx.OrgId, Ctx.ProjectId, Ctx.TaskId, Type.NotNull(), _model.Est, _model.Inc, _model.Note));
                if (OnCreated != null)
                {
                    await OnCreated(res);
                }
            }
            else
            {
                var res = await Api.VItem.Update(new(UpdateVItem.Org, UpdateVItem.Project, UpdateVItem.Task, UpdateVItem.Type, UpdateVItem.Id, _model.Inc, _model.Note));
                if (OnUpdated != null)
                {
                    await OnUpdated(res);
                }
            }
            DialogService.Close();
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
        
    }

}