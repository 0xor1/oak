@using Common.Client
@using Common.Shared
@using Oak.Api.ProjectMember
@using Oak.Api.Task
@using Oak.Client.Lib
@using S = Oak.I18n.S
@using IApi = Oak.Api.IApi
@using ATask = Oak.Api.Task.Task
@using Task = System.Threading.Tasks.Task
<div class="root col ov-v">
    <RadzenTemplateForm
        TItem="Model"
        Data="_model"
        Submit="Do"
        class="flx col ai-stretch g-1">
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Name" Text="@L.S(S.Name)"/>
            <RadzenTextBox Name="Name" @bind-Value="@_model.Name"/>
            <RadzenRequiredValidator Component="Name" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Description" Text="@L.S(S.Description)"/>
            <RadzenTextArea Name="Description" @bind-Value="@_model.Description" Rows="4"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="IsParallel" Text="@L.S(S.Parallel)"/>
            <RadzenCheckBox Name="IsParallel" @bind-Value="@_model.IsParallel"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="User" Text="@L.S(S.User)"/>
            <RadzenDropDown Name="User" @bind-Value="_model.User" TextProperty="Name" TValue="ProjectMember?" Data="Users" LoadData="LoadProjectMembers" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="TimeEst" Text="@L.S(S.TimeEst)"/>
            <DurationInput Name="TimeEst" UICtx="UICtx" @bind-Value="@_model.TimeEst"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="CostEst" Text="@L.S(S.CostEst)"/>
            <CurrencyInput Name="CostEst" UICtx="UICtx" @bind-Value="_model.CostEst"/>
        </div>
        <div class="flx g-0h jc-stretch">
            <RadzenButton ButtonType="ButtonType.Submit" IsBusy="_doing" Text="@(UpdateTask != null? L.S(S.Update): L.S(S.Create))"/>
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" IsBusy="_doing" Text="@L.S(S.Cancel)" Click="@(_ => DialogService.Close())"/>
        </div>
    </RadzenTemplateForm>
</div>

@inject L L;
@inject IApi Api;
@inject DialogService DialogService;
@inject IUserService UserService;
@code {

    [Parameter]
    public string? OrgId { get; set; }

    [Parameter]
    public string? ProjectId { get; set; }

    [Parameter]
    public string? ParentId { get; set; }

    [Parameter]
    public ATask? PrevSib { get; set; }

    [Parameter]
    public ATask? UpdateTask { get; set; }

    [Parameter]
    public Func<CreateRes, ATask?, Task>? OnCreated { get; set; }

    [Parameter]
    public Func<UpdateRes, Task>? OnUpdated { get; set; }

    [Parameter]
    [EditorRequired]
    public UICtx UICtx { get; set; }

    private CurrencyPicker.Currency? Currency { get; set; }

    public class Model
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public bool IsParallel { get; set; }
        public ProjectMember? User { get; set; }
        public ulong TimeEst { get; set; }
        public ulong CostEst { get; set; }
    }

    Model _model = new();
    private bool _doing;

    protected override async Task OnInitializedAsync()
    {
        if (UpdateTask != null)
        {
            _model.Name = UpdateTask.Name;
            _model.Description = UpdateTask.Description;
            _model.IsParallel = UpdateTask.IsParallel;
            _model.User = await UserService.Get(OrgId, ProjectId, UpdateTask.User);
            _model.TimeEst = UpdateTask.TimeEst;
            _model.CostEst = UpdateTask.CostEst;
        }
        Currency = CurrencyPicker.Currencies.SingleOrDefault(x => x.Code == UICtx.Project.CurrencyCode);
        await LoadProjectMembers(new());
    }

    private async Task Do()
    {
        _doing = true;
        try
        {
            if (UpdateTask == null)
            {
                var res = await Api.Task.Create(new(OrgId.NotNull(), ProjectId.NotNull(), ParentId.NotNull(), PrevSib?.Id, _model.Name, _model.Description, _model.IsParallel, _model.User?.Id, _model.TimeEst, _model.CostEst));
                if (OnCreated != null)
                {
                    await OnCreated(res, PrevSib);
                }
            }
            else
            {
                var res = await Api.Task.Update(new(UpdateTask.Org, UpdateTask.Project, UpdateTask.Id, UpdateTask.Parent, null, _model.Name, _model.Description, _model.IsParallel, new(_model.User?.Id), _model.TimeEst, _model.CostEst));
                if (OnUpdated != null)
                {
                    await OnUpdated(res);
                }
            }
            DialogService.Close();
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        
        _doing = false;
    }

    private List<ProjectMember> Users { get; set; } = new();

    private async Task LoadProjectMembers(LoadDataArgs args)
    {
        Users = await UserService.Search(OrgId, ProjectId, true,
            args.Filter);
    }

}