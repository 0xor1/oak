@using Common.Client
@using Common.Shared.Auth
@using Oak.Api.Task
@using Oak.I18n
@using IApi = Oak.Api.IApi
@using ATask = Oak.Api.Task.Task
@using Task = System.Threading.Tasks.Task
<div class="root col ov-v">
    <RadzenTemplateForm
        TItem="Model"
        Data="_model"
        Submit="Do"
        class="flx col ai-stretch g-1">
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Name" Text="@L.S(S.Name)"/>
            <RadzenTextBox Name="Name" @bind-Value="@_model.Name"/>
            <RadzenRequiredValidator Component="Name" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Description" Text="@L.S(S.Description)"/>
            <RadzenTextArea Name="Description" @bind-Value="@_model.Description" Rows="4"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="IsParallel" Text="@L.S(S.Parallel)"/>
            <RadzenCheckBox Name="IsParallel" @bind-Value="@_model.IsParallel"/>
        </div>
        <!-- TODO create project user picker -->
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="TimeEst" Text="@L.S(S.TimeEst)"/>
            <RadzenNumeric TValue="ulong" Name="TimeEst" Min="0" @bind-Value="@_model.TimeEst"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="CostEst" Text="@L.S(S.CostEst)"/>
            <RadzenNumeric TValue="ulong" Name="CostEst" Min="0" @bind-Value="@_model.CostEst"/>
        </div>
        <div class="flx g-1 jc-stretch">
            <RadzenButton class="grow-1" ButtonType="ButtonType.Submit" IsBusy="_doing" Text="@(UpdateTask != null? L.S(S.Edit): L.S(S.Create))"/>
            <RadzenButton class="grow-1" ButtonStyle="ButtonStyle.Secondary" IsBusy="_doing" Text="@L.S(S.Cancel)" Click="@(_ => DialogService.Close())"/>
        </div>
    </RadzenTemplateForm>
</div>

@inject L L;
@inject IApi Api;
@inject DialogService DialogService;
@code {

    [Parameter]
    [EditorRequired]
    public string OrgId { get; set; }

    [Parameter]
    [EditorRequired]
    public string ProjectId { get; set; }

    [Parameter]
    [EditorRequired]
    public string ParentId { get; set; }

    [Parameter]
    public ATask? PrevSib { get; set; }

    [Parameter]
    public ATask? UpdateTask { get; set; }

    [Parameter]
    public Func<CreateRes, ATask?, Task>? OnCreated { get; set; }

    [Parameter]
    public Func<UpdateRes, Task>? OnUpdated { get; set; }

    public class Model
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public bool IsParallel { get; set; }
        public string? User { get; set; }
        public ulong TimeEst { get; set; }
        public ulong CostEst { get; set; }
    }

    Model _model = new();
    private bool _doing;

    protected override Task OnInitializedAsync()
    {
        if (UpdateTask != null)
        {
            _model.Name = UpdateTask.Name;
            _model.Description = UpdateTask.Description;
            _model.IsParallel = UpdateTask.IsParallel;
            _model.User = UpdateTask.User;
            _model.TimeEst = UpdateTask.TimeEst;
            _model.CostEst = UpdateTask.CostEst;
        }
        return Task.CompletedTask;
    }

    private async Task Do()
    {
        _doing = true;
        try
        {
            if (UpdateTask == null)
            {
                var res = await Api.Task.Create(new(OrgId, ProjectId, ParentId, PrevSib?.Id, _model.Name, _model.Description, _model.IsParallel, _model.User, _model.TimeEst, _model.CostEst));
                if (OnCreated != null)
                {
                    await OnCreated(res, PrevSib);
                }
            }
            else
            {
                var res = await Api.Task.Update(new(OrgId, ProjectId, UpdateTask.Id, ParentId, null, _model.Name, _model.Description, _model.IsParallel, new(_model.User), _model.TimeEst, _model.CostEst));
                if (OnUpdated != null)
                {
                    await OnUpdated(res);
                }
            }
            DialogService.Close();
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        
        _doing = false;
    }

}