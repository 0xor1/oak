@using Common.Client
@using Common.Shared
@using Oak.Api
@using Oak.Api.File
@using Oak.Client.Lib
@using ATask = Oak.Api.Task.Task
@using S = Oak.I18n.S
@using CS = Common.Shared.I18n.S
<div class="root col">
    <div class="flx col ai-stretch g-1">
        <div class="flx col ai-stretch">
            <div class="rz-fileupload">
                <div class="rz-fileupload-buttonbar">
                    <span class="rz-fileupload-choose rz-button">
                        <InputFile OnChange="OnFilesChanged" multiple/>
                        <span class="rz-button-text">Choose</span>
                    </span>
                </div>
                <div class="flx col jc-s ai-s w-100 g-0h">
                    @foreach (var f in Files)
                    {
                        <div class="flx w-100 jc-sb g-0h @(f.Status == FileStatus.Uploading? "rz-background-color-info-light": f.Status == FileStatus.Success? "rz-background-color-success-light": f.Status is FileStatus.Error or FileStatus.TooLarge? "rz-background-color-danger-light" : "")">
                            <span class="shrink-1 ellip">
                                @f.Name
                            </span>
                            <div class="flx g-0h shrink-0">
                                @switch (f.Status)
                                {
                                    case FileStatus.NotStarted:
                                        <span>@L.S(S.NotStarted)</span>
                                        break;
                                    case FileStatus.Uploading:
                                        <span>@L.S(S.Uploading)</span>
                                        break;
                                    case FileStatus.Success:
                                        <span>@L.S(CS.Success)</span>
                                        break;
                                    case FileStatus.Error:
                                        <span>@L.S(CS.Error)</span>
                                        break;
                                    case FileStatus.TooLarge:
                                        <span>@L.S(CS.FileTooLarge, new {MaxSize = Util.Size(FileRpcs.Upload.MaxSize ?? 0L)})</span>
                                        break;
                                }
                                <span>@Util.Size((ulong)f.Size)</span>
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="cancel" Size="ButtonSize.ExtraSmall" Click="() => CancelFile(f)"/>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="flx g-0h jc-stretch">
            <RadzenButton ButtonType="ButtonType.Submit" IsBusy="_doing" Text="@(L.S(S.Upload))" Click="@Do"/>
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" IsBusy="_doing" Text="@L.S(S.Cancel)" Click="@(_ => DialogService.Close())"/>
        </div>
    </div>
</div>

@inject L L;
@inject IApi Api;
@inject UiCtx Ctx;
@inject DialogService DialogService;
@code {

    [Parameter]
    public Func<FileRes, Task>? OnCreated { get; set; }

    [Parameter]
    public ATask? SubTask { get; set; }

    private string TaskId => SubTask?.Id ?? Ctx.TaskId;
    private List<File> Files = new ();
    
    private bool _doing;
    private RadzenUpload _uploadRef;

    private async Task Do()
    {
        _doing = true;
        try
        {
            FileRes? res = null;
            foreach (var f in Files.Where(x => x.Status != FileStatus.TooLarge))
            {
                f.Status = FileStatus.Uploading;
                try
                {
                    res = await Api.File.Upload(new(Ctx.OrgId, Ctx.ProjectId, TaskId)
                    {
                        Stream = new(
                            f.BFile.OpenReadStream((long)(5 * Util.GB)), f.Name, f.Type, false, f.Size)
                    });
                    f.Status = FileStatus.Success;
                }
                catch(Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    f.Status = FileStatus.Error;
                }
                StateHasChanged();
            }
            if (OnCreated != null && res != null)
            {
                await OnCreated(res);
            }
            DialogService.Close();
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
    }

    private async Task OnFilesChanged(InputFileChangeEventArgs arg)
    {
        Files.Clear();
        Files.AddRange(arg.GetMultipleFiles().Select(x => new File(x)));
        if (FileRpcs.Upload.MaxSize != null)
        {
            Files.Where(x => x.Size > FileRpcs.Upload.MaxSize).ForEach(x => x.Status = FileStatus.TooLarge);
        }
        await Task.CompletedTask;
    }

    private Task CancelFile(File f)
    {
        if (_doing)
        {
            return Task.CompletedTask;
        }
        Files.Remove(f);
        return Task.CompletedTask;
    }

    public enum FileStatus
    {
        NotStarted,
        Uploading,
        Success,
        Error,
        TooLarge
    }

    record File(IBrowserFile BFile)
    {
        public FileStatus Status { get; set; } = FileStatus.NotStarted;
        public string Name => BFile.Name;
        public string Type => BFile.ContentType;
        public ulong Size => (ulong)BFile.Size;
    }

}