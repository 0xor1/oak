@using Common.Client
@using Common.Shared.Auth
@using Oak.I18n
@using IApi = Oak.Api.IApi
<div class="root col">
    <RadzenTemplateForm
        TItem="Model"
        Data="_model"
        Submit="Do"
        class="flx col ai-stretch g-1">
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Name" Text="@L.S(S.Name)"/>
            <RadzenTextBox Name="Name" @bind-Value="@_model.Name"/>
            <RadzenRequiredValidator Component="Name" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="IsPublic" Text="@L.S(S.Public)"/>
            <RadzenSwitch Name="Public" @bind-Value="@_model.IsPublic"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Currency" Text="@L.S(S.Currency)"/>
            <CurrencyPicker Name="Currency" @bind-Value="@_model.Currency"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="HoursPerDay" Text="@L.S(S.HoursPerDay)"/>
            <RadzenNumeric TValue="uint?" Name="HoursPerDay" Min="1" Max="24"  @bind-Value="@_model.HoursPerDay"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="DaysPerWeek" Text="@L.S(S.DaysPerWeek)"/>
            <RadzenNumeric TValue="uint?" Name="DaysPerWeek" Min="1" Max="7"  @bind-Value="@_model.DaysPerWeek"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="StartOn" Text="@L.S(S.StartOn)"/>
            <RadzenDatePicker TValue="DateTime?" Name="StartOn" DateFormat="@Session.DateFmt"  @bind-Value="@_model.StartOn"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="EndOn" Text="@L.S(S.EndOn)"/>
            <RadzenDatePicker TValue="DateTime?" Name="EndOn" DateFormat="@Session.DateFmt" @bind-Value="@_model.EndOn"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="FileLimit" Text="@L.S(S.FileLimit)"/>
            <RadzenNumeric TValue="ulong" Min="0" Name="FileLimit" @bind-Value="@_model.FileLimit"/>
            <RadzenRequiredValidator Component="FileLimit" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <RadzenButton ButtonType="ButtonType.Submit" IsBusy="_doing" Text="@L.S(S.Create)"/>
    </RadzenTemplateForm>
</div>

@inject L L;
@inject IApi Api;
@inject NavigationManager Nav;
@code {

    [Parameter]
    public string OrgId { get; set; }

    [Parameter]
    public ISession Session { get; set; }

    public class Model
    {
        public string Name { get; set; } = "";
        public bool IsPublic { get; set; }
        public CurrencyPicker.Currency Currency { get; set; } = CurrencyPicker.USD;
        public uint? HoursPerDay { get; set; }
        public uint? DaysPerWeek { get; set; }
        public DateTime? StartOn { get; set; }
        public DateTime? EndOn { get; set; }
        public ulong FileLimit { get; set; }
    }

    Model _model = new();
    private bool _doing;

    private async Task Do()
    {
        _doing = true;
        try
        {
            var p = await Api.Project.Create(new(OrgId, _model.IsPublic, _model.Name, _model.Currency.Symbol, _model.Currency.Code, _model.HoursPerDay, _model.DaysPerWeek, _model.StartOn, _model.EndOn, _model.FileLimit));
            Nav.NavigateTo($"/org/{OrgId}/project/{p.Id}/task/{p.Id}");
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
    }

}