@using Common.Client
@using Common.Shared.Auth
@using Oak.Api.OrgMember
@using Oak.Api.ProjectMember
@using Oak.Client.Lib
@using Oak.I18n
@using CS = Common.Shared.I18n.S
@using IApi = Oak.Api.IApi
<div class="root col ov-v">
    <RadzenTemplateForm
        TItem="Model"
        Data="_model"
        Submit="Do"
        class="flx col ai-stretch g-1">
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="User" Text="@L.S(S.User)"/>
            <RadzenDropDown Name="User" Disabled="@(UpdateMember != null)" @bind-Value="_model.User" TextProperty="Name" TValue="OrgMember?" Data="Users" LoadData="LoadOrgMembers" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith"/>
            <RadzenRequiredValidator Component="User" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Role" Text="@L.S(S.OrgMemberRole)"/>
            <RadzenDropDown Name="Role" @bind-Value="@_model.Role" TValue="ProjectMemberRole" ValueProperty="Role" TextProperty="Display" Data="ProjectMembers.Roles(L, Ctx)"/>
        </div>
        <div class="flx g-0h jc-stretch">
            <RadzenButton ButtonType="ButtonType.Submit" IsBusy="_doing" Text="@(UpdateMember != null? L.S(CS.Update): L.S(S.Add))"/>
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" IsBusy="_doing" Text="@L.S(S.Cancel)" Click="@(_ => DialogService.Close())"/>
        </div>
    </RadzenTemplateForm>
</div>

@inject L L;
@inject UiCtx Ctx;
@inject IApi Api;
@inject IUserService UserService;
@inject DialogService DialogService;
@code {

    [Parameter]
    public string OrgId { get; set; }
    
    [Parameter]
    public string ProjectId { get; set; }

    [Parameter]
    public ISession Session { get; set; }

    [Parameter]
    public ProjectMember? UpdateMember { get; set; }

    [Parameter]
    public Func<ProjectMember, Task>? OnUpdated { get; set; } 

    [Parameter]
    public Func<ProjectMember, Task>? OnAdded { get; set; }

    public class Model
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public ProjectMemberRole Role { get; set; } = ProjectMemberRole.Reader;
        public OrgMember? User { get; set; }
    }

    Model _model = new();
    private bool _doing;

    protected override async Task OnInitializedAsync()
    {
        if (UpdateMember != null)
        {
            var um = UpdateMember;
            _model.User = new OrgMember(um.Org, um.Id, um.IsActive, um.Name, um.OrgRole);
            _model.Role = UpdateMember.Role;
        }
        else
        {
            await LoadOrgMembers(new ());
        }
    }
    
    private async Task Do()
    {
        if (_model.User == null)
        {
            return;
        }
        _doing = true;
        try
        {
            if (UpdateMember == null)
            {
                var mem = await Api.ProjectMember.Add(new(OrgId, ProjectId, _model.User.Id, _model.Role));
                if (OnAdded != null)
                {
                    await OnAdded(mem);
                }
            }
            else
            {
                var mem = await Api.ProjectMember.Update(new(OrgId, ProjectId, UpdateMember.Id, _model.Role));
                if (OnUpdated != null)
                {
                    await OnUpdated(mem);
                }
            }
            DialogService.Close();
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
    }

    private List<OrgMember> Users { get; set; } = new();

    private async Task LoadOrgMembers(LoadDataArgs args)
    {
        Users = await UserService.Search(OrgId, true,
            args.Filter);
    }

}