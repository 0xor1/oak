@using Common.Client
@using Oak.Api
@using Oak.I18n
<div class="root col">
    <RadzenTemplateForm
        TItem="Model"
        Data="_model"
        Submit="Do"
        class="flx col ai-stretch g-1">
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="OrgName" Text="@L.S(S.OrgName)"/>
            <RadzenTextBox Name="OrgName" @bind-Value="@_model.OrgName"/>
            <RadzenRequiredValidator Component="OrgName" Popup="true"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="OwnerName" Text="@L.S(S.OrgYourName)"/>
            <RadzenTextBox Name="OwnerName" @bind-Value="@_model.OwnerName"/>
            <RadzenRequiredValidator Component="OwnerName" Popup="true"></RadzenRequiredValidator>
        </div>
        <RadzenButton ButtonType="ButtonType.Submit" IsBusy="_doing" Text="@L.S(S.Create)"/>
    </RadzenTemplateForm>
</div>

@inject L L;
@inject IApi Api;
@inject NavigationManager Nav;
@code {

    public class Model
    {
        public string OrgName { get; set; } = "";
        public string OwnerName { get; set; } = "";
    }

    Model _model = new();
    private bool _doing;

    private async Task Do()
    {
        _doing = true;
        try
        {
            var org = await Api.Org.Create(new(_model.OrgName, _model.OwnerName));
            Nav.NavigateTo($"/org/{org.Id}/projects");
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
        
    }

}