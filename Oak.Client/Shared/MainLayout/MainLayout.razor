<div class="root col">
    <CascadingValue Value="@_session">
        <DemoBanner/>
        <RadzenLayout class="rz-shadow-3 grow-1">
                <AppHeader @bind-LeftExpanded="_leftExpanded"/>
                <RadzenSidebar @bind-Expanded="@_leftExpanded">
                    <RadzenPanelMenu>
                        @if (_session.IsAnon)
                        {
                            <RadzenPanelMenuItem Text="@L.S(S.Home)" Icon="home" Path="/" Click="CollapseIfNarrow"/>
                        }
                        else
                        {
                            <RadzenPanelMenuItem Text="@L.S(S.OrgMyOrgs)" Icon="corporate_fare" Path="/my_orgs" Click="CollapseIfNarrow"/>
                            @if (_orgId != null)
                            {
                                if (Ctx.HasOrgAdminPerm)
                                {
                                    <RadzenPanelMenuItem Text="@L.S(S.EntityNameMembers, new { Ctx.Org?.Name })" Icon="group" Path="@($"/org/{_orgId}/members")" Click="CollapseIfNarrow"/>
                                }
                                <RadzenPanelMenuItem Text="@L.S(S.OrgNameProjects, new { Ctx.Org?.Name })" Icon="inventory" Path="@($"/org/{_orgId}/projects")" Click="CollapseIfNarrow"/>
                                if (_projectId != null && Ctx.HasProjectAdminPerm)
                                {
                                    <RadzenPanelMenuItem Text="@L.S(S.EntityNameMembers, new { Ctx.Project?.Name })" Icon="group" Path="@($"/org/{_orgId}/project/{_projectId}/members")" Click="CollapseIfNarrow"/>
                                }
                            }
                        }
                        @if (ShowTimers)
                        {
                            <RadzenPanelMenuItem Text="@L.S(S.Timers)" Icon="timer">
                                <RadzenPanelMenuItem class="d-none"/>
                                <div class="flx col">
                                    @foreach (var t in Ctx.Timers ?? new List<Timer>())
                                    {
                                        <Timer Value="t"/>
                                    }
                                </div>
                            </RadzenPanelMenuItem>
                        }
                        @if (ShowDisplayOptions)
                        {
                            <RadzenPanelMenuItem Text="@L.S(S.Display)" Icon="visibility">
                                <RadzenPanelMenuItem class="d-none"/>
                                <div class="flx col p-0t p-l-4 g-0t">
                                    <div class="flx g-0h">
                                        <RadzenCheckBox Name="DisplayUser" TValue="bool" @bind-Value="Ctx.Display.User"/>
                                        <RadzenLabel Component="DisplayUser">@L.S(S.User)</RadzenLabel>
                                    </div>
                                    <div class="flx g-0h">
                                        <RadzenCheckBox Name="Time" TValue="bool" @bind-Value="Ctx.Display.Time"/>
                                        <RadzenLabel Component="Time">@L.S(S.Time)</RadzenLabel>
                                    </div>
                                    <div class="flx g-0h">
                                        <RadzenCheckBox Name="Cost" TValue="bool" @bind-Value="Ctx.Display.Cost"/>
                                        <RadzenLabel Component="Cost">@L.S(S.Cost)</RadzenLabel>
                                    </div>
                                    <div class="flx g-0h">
                                        <RadzenCheckBox Name="File" TValue="bool" @bind-Value="Ctx.Display.File"/>
                                        <RadzenLabel Component="File">@L.S(S.File)</RadzenLabel>
                                    </div>
                                    <div class="flx g-0h">
                                        <RadzenCheckBox Name="SubCounts" TValue="bool" @bind-Value="Ctx.Display.SubCounts"/>
                                        <RadzenLabel Component="SubCounts">@L.S(S.SubCounts)</RadzenLabel>
                                    </div>
                                    <div class="flx g-0h">
                                        <RadzenCheckBox Name="CreatedOn" TValue="bool" @bind-Value="Ctx.Display.CreatedOn"/>
                                        <RadzenLabel Component="CreatedOn">@L.S(S.CreatedOn)</RadzenLabel>
                                    </div>
                                </div>
                            </RadzenPanelMenuItem>
                        }
                    </RadzenPanelMenu>
                </RadzenSidebar>
                <RadzenBody class="root">
                    @if (_ready)
                    {
                        @Body
                    }
                    else
                    {
                        <p class="m-1">@L.S(CS.LoadingSession)</p>
                    }
                </RadzenBody>
                <RadzenComponents/>
        </RadzenLayout>
    </CascadingValue>
</div>
@using Common.Client
@using Common.Client.Layout
@using Common.Shared
@using Common.Shared.Auth
@using Oak.Api.Org
@using CS = Common.Shared.I18n.S
@using StringExts = Common.Shared.StringAndBytesExt
@using Oak.Client.Lib
@using IApi = Oak.Api.IApi
@using S = Oak.I18n.S
@using Timer = Oak.Api.Timer.Timer
@inherits LayoutComponentBase
@inject IAuthService Auth
@inject ITimerService TimerService
@inject L L
@inject UiCtx Ctx
@inject NavigationManager Nav
@inject IApi Api
@implements IDisposable
@inject IJSRuntime Js;
@code{

    private bool _leftExpanded;
    private ISession _session = Session.CommonDefault();
    private bool _ready;
    private IDisposable? _eventReg;
    private string? _orgId;
    private string? _projectId;
    private string? _taskId;
    private bool ShowDisplayOptions => !Ctx.OrgId.IsNullOrWhiteSpace();
    private bool ShowTimers => Ctx.Timers?.Any() ?? false;
    
    protected override async Task OnInitializedAsync()
    {
        TimerService.OnTimersChanged(TimersChanged);
        Auth.OnSessionChanged(AuthStateChanged);
        AuthStateChanged(await Auth.GetSession());
        _eventReg = Nav.RegisterLocationChangingHandler(LocationChanging);
        await SetCtxFromUrl(Nav.Uri);
        _ready = true;
    }

    private async ValueTask LocationChanging(LocationChangingContext arg)
        => await SetCtxFromUrl(arg.TargetLocation);

    private void AuthStateChanged(ISession s)
    {
        _session = s;
        StateHasChanged();
    }

    private void TimersChanged(List<Timer> ts)
    {
        Ctx.Set(ts);
        StateHasChanged();
    }

    public void Dispose()
    {
        _eventReg?.Dispose();
    }

    private async ValueTask SetCtxFromUrl(string url)
    {
        // check for /org/{OrgId}/project/{ProjectId}/task/{TaskId}
        string? orgId = null;
        var orgMatch = OrgIdRx().Match(url);
        if (orgMatch.Success && orgMatch.Groups.Count == 2)
        {
            orgId = orgMatch.Groups[1].Value;
        }
        string? projectId = null;
        var projectMatch = ProjectIdRx().Match(url);
        if (projectMatch.Success && projectMatch.Groups.Count == 2)
        {
            projectId = projectMatch.Groups[1].Value;
        }
        string? taskId = null;
        var taskMatch = TaskIdRx().Match(url);
        if (taskMatch.Success && taskMatch.Groups.Count == 2)
        {
            taskId = taskMatch.Groups[1].Value;
        }
    
        var changed = _orgId != orgId || _projectId != projectId || _taskId != taskId;
        _orgId = orgId;
        _projectId = projectId;
        _taskId = taskId;
        if (_taskId != null && _projectId != null && _orgId != null && changed)
        {
            await Ctx.Set(await Api.Task.GetOne(new (_orgId, _projectId, _taskId)));
        }
        else if (_projectId != null && _orgId != null && changed)
        {
            await Ctx.Set(await Api.Project.GetOne(new (_orgId, _projectId)));
        }
        else if (_orgId != null && changed)
        {
            await Ctx.Set(await Api.Org.GetOne(new (_orgId)));
        }
        else if (changed)
        {
            await Ctx.Set((Org?)null);
        }
        if (changed)
        {
            StateHasChanged();
        }
    }

    private async Task CollapseIfNarrow(MouseEventArgs args)
    {
        var width = await Js.InvokeAsync<decimal>("getWidth");
        if(width < 50)
            _leftExpanded = false;
    }
}