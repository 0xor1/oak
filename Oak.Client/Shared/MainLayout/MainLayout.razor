<div class="root col">
    @if (_config.DemoMode)
    {
        <a class="txt-dec-none" href="@_config.RepoUrl" target="_blank">
        <div title="@L.S(CS.DemoTitle)" class="flx jc-c rz-background-color-danger-light rz-color-black f-b ptr h-1h">
            <span class="m-r-0h">@L.S(CS.Demo).ToUpper()</span>
            @if (!StringExts.IsNullOrEmpty(_config.RepoUrl))
            {
                <img src="github-mark.png"/>
            }
        </div>
        </a>
    }
    <RadzenLayout class="rz-shadow-3 grow-1">
        <RadzenHeader class="flx jc-sb">
            <RadzenSidebarToggle class="flx jc-c ai-c sq-4t" Click="@(() => _leftExpanded = !_leftExpanded)" />
            <RadzenProfileMenu class="m-t-0t">
                <Template>
                    <RadzenIcon Icon="account_circle" IconStyle="@(_session.IsAuthed? IconStyle.Success: IconStyle.Danger)"></RadzenIcon>
                </Template>
                <ChildContent>
                    @if (_session.IsAuthed)
                    {
                        <RadzenProfileMenuItem Text="@L.S(CS.SignOut)" Path="sign_out" Icon="account_circle"></RadzenProfileMenuItem>
                    }
                    else
                    {
                        <RadzenProfileMenuItem Text="@L.S(CS.SignIn)" Path="sign_in" Icon="account_circle"></RadzenProfileMenuItem>
                    }
                    <RadzenProfileMenuItem Text="@L.S(CS.L10n)" Path="l10n" Icon="translate"></RadzenProfileMenuItem>
                    @if (_session.IsAuthed)
                    {
                        // manually build a custom nav menu item to have full
                        // control over the content
                        <li class="rz-navigation-item" onclick="@ToggleLiveUI" title="@L.S(CS.ToggleLiveUpdates)">
                            <div class="rz-navigation-item-wrapper">
                                <div class="rz-navigation-item-link">
                                    @if (_session.FcmEnabled)
                                        {
                                            <i class="rzi rz-navigation-item-icon rz-color-success">monitor_heart</i>
                                            <span class="rz-navigation-item-text">
                                                @L.S(CS.Live) <strong class="rz-color-success">@L.S(CS.On)</strong>
                                            </span>
                                        }
                                        else
                                        {
                                            <i class="rzi rz-navigation-item-icon rz-color-danger">monitor_heart</i>
                                            <span class="rz-navigation-item-text">
                                                @L.S(CS.Live) <strong class="rz-color-danger">@L.S(CS.Off)</strong>
                                            </span>
                                        }
                                </div>
                            </div>
                        </li>
                    }
                </ChildContent>
            </RadzenProfileMenu>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@_leftExpanded">
            <RadzenPanelMenu>
                @if (_session.IsAnon)
                {
                    <RadzenPanelMenuItem Text="@L.S(S.Home)" Icon="home" Path="/" Click="CollapseIfNarrow"/>
                }
                else
                {
                    <RadzenPanelMenuItem Text="@L.S(S.OrgMyOrgs)" Icon="corporate_fare" Path="/my_orgs" Click="CollapseIfNarrow"/>
                    @if (_orgId != null)
                    {
                        <RadzenPanelMenuItem Text="@L.S(S.OrgNameProjects, new { Ctx.Org?.Name })" Icon="inventory" Path="@($"/org/{_orgId}/projects")" Click="CollapseIfNarrow"/>
                        if (Ctx.HasOrgAdminPerm)
                        {
                            <RadzenPanelMenuItem Text="@L.S(S.OrgMembers)" Icon="group" Path="@($"/org/{_orgId}/members")" Click="CollapseIfNarrow"/>
                        }
                    }
                    <RadzenPanelMenuItem Text="@L.S(S.Display)" Icon="visibility">
                        <RadzenPanelMenuItem class="d-none"/>
                        <div class="flx col p-0t p-l-4 g-0t">
                            <div class="flx g-0h">
                                <RadzenCheckBox Name="DisplayUser" TValue="bool" @bind-Value="Ctx.Display.User"/>
                                <RadzenLabel Component="DisplayUser">@L.S(S.User)</RadzenLabel>
                            </div>
                            <div class="flx g-0h">
                                <RadzenCheckBox Name="Time" TValue="bool" @bind-Value="Ctx.Display.Time"/>
                                <RadzenLabel Component="Time">@L.S(S.Time)</RadzenLabel>
                            </div>
                            <div class="flx g-0h">
                                <RadzenCheckBox Name="Cost" TValue="bool" @bind-Value="Ctx.Display.Cost"/>
                                <RadzenLabel Component="Cost">@L.S(S.Cost)</RadzenLabel>
                            </div>
                            <div class="flx g-0h">
                                <RadzenCheckBox Name="File" TValue="bool" @bind-Value="Ctx.Display.File"/>
                                <RadzenLabel Component="File">@L.S(S.File)</RadzenLabel>
                            </div>
                            <div class="flx g-0h">
                                <RadzenCheckBox Name="SubCounts" TValue="bool" @bind-Value="Ctx.Display.SubCounts"/>
                                <RadzenLabel Component="SubCounts">@L.S(S.SubCounts)</RadzenLabel>
                            </div>
                            <div class="flx g-0h">
                                <RadzenCheckBox Name="CreatedOn" TValue="bool" @bind-Value="Ctx.Display.CreatedOn"/>
                                <RadzenLabel Component="CreatedOn">@L.S(S.CreatedOn)</RadzenLabel>
                            </div>
                        </div>
                    </RadzenPanelMenuItem>
                }
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody class="root rz-background-color-base-100">
            <CascadingValue Value="@_session">
                @if (_ready)
                {
                    @Body
                }
                else
                {
                    <p>@L.S(S.Loading)</p>
                }
            </CascadingValue>
        </RadzenBody>
        <RadzenComponents/>
    </RadzenLayout>
</div>
@using Oak.I18n
@using Common.Client
@using Common.Shared.Auth
@using CS = Common.Shared.I18n.S
@using StringExts = Common.Shared.StringAndBytesExt
@using Oak.Client.Lib
@using IApi = Oak.Api.IApi
@inherits LayoutComponentBase
@inject IAuthService Auth
@inject L L
@inject UiCtx Ctx
@inject NavigationManager Nav
@inject IApi Api
@implements IDisposable
@inject IJSRuntime Js;
@code{

    private bool _leftExpanded;
    private ISession _session = Session.CommonDefault();
    private Config _config = new (false, null);
    private bool _ready;
    private IDisposable? _eventReg;
    private string? _orgId;
    private string? _projectId;
    private string? _taskId;
    
    protected override async Task OnInitializedAsync()
    {
        Auth.OnSessionChanged(AuthStateChanged);
        AuthStateChanged(await Auth.GetSession());
        _eventReg = Nav.RegisterLocationChangingHandler(LocationChanging);
        _config = await Api.App.GetConfig();
        _ready = true;
    }

    private async ValueTask LocationChanging(LocationChangingContext arg)
    {
        (_orgId, _projectId, _taskId) = GetIdsFromUrl(arg.TargetLocation);
        if (_orgId != null && _projectId == null && _taskId == null)
        {
            await Ctx.Set(await Api.Org.GetOne(new (_orgId)));
        }
    }

    private void AuthStateChanged(ISession s)
    {
        _session = s;
        StateHasChanged();
    }

    private async void ToggleLiveUI()
    {
        await Auth.FcmEnabled(!_session.FcmEnabled);
    }

    public void Dispose()
    {
        _eventReg?.Dispose();
    }

    private (string? orgId, string? projectId, string? taskId) GetIdsFromUrl(string url)
    {
        // check for /org/{OrgId}/project/{ProjectId}/task/{TaskId}
        string? orgId = null;
        var orgMatch = OrgIdRx().Match(url);
        if (orgMatch.Success && orgMatch.Groups.Count == 2)
        {
            orgId = orgMatch.Groups[1].Value;
        }
        string? projectId = null;
        var projectMatch = ProjectIdRx().Match(url);
        if (projectMatch.Success && projectMatch.Groups.Count == 2)
        {
            projectId = projectMatch.Groups[1].Value;
        }
        string? taskId = null;
        var taskMatch = TaskIdRx().Match(url);
        if (taskMatch.Success && taskMatch.Groups.Count == 2)
        {
            taskId = taskMatch.Groups[1].Value;
        }
    
        return (orgId, projectId, taskId);
    }

    private async Task CollapseIfNarrow(MouseEventArgs args)
    {
        var width = await Js.InvokeAsync<decimal>("getWidth");
        if(width < 50)
            _leftExpanded = false;
    }
}