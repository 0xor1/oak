<div class="root">
    <RadzenLayout class="rz-shadow-3 fill">
        <RadzenHeader class="flx jc-sb">
            <RadzenSidebarToggle class="sq-4t" Click="@(() => _leftExpanded = !_leftExpanded)" />
            <RadzenProfileMenu class="m-t-0t">
                <Template>
                    <RadzenIcon Icon="account_circle" IconStyle="@(_session.IsAuthed? IconStyle.Success: IconStyle.Danger)"></RadzenIcon>
                </Template>
                <ChildContent>
                    @if (_session.IsAuthed)
                    {
                        <RadzenProfileMenuItem Text="@L.S(S.SignOut)" Path="sign_out" Icon="account_circle"></RadzenProfileMenuItem>
                    }
                    else
                    {
                        <RadzenProfileMenuItem Text="@L.S(S.SignIn)" Path="sign_in" Icon="account_circle"></RadzenProfileMenuItem>
                    }
                    <RadzenProfileMenuItem Text="@L.S(S.L10n)" Path="l10n" Icon="translate"></RadzenProfileMenuItem>
                    @if (_session.IsAuthed)
                    {
                        // manually build a custom nav menu item to have full
                        // control over the content
                        <li class="rz-navigation-item" onclick="@ToggleLiveUI" title="@L.S(S.ToggleLiveUpdates)">
                            <div class="rz-navigation-item-wrapper">
                                <div class="rz-navigation-item-link">
                                    @if (_session.FcmEnabled)
                                        {
                                            <i class="rzi rz-navigation-item-icon rz-color-success">monitor_heart</i>
                                            <span class="rz-navigation-item-text">
                                                @L.S(S.Live) <strong class="rz-color-success">@L.S(S.On)</strong>
                                            </span>
                                        }
                                        else
                                        {
                                            <i class="rzi rz-navigation-item-icon rz-color-danger">monitor_heart</i>
                                            <span class="rz-navigation-item-text">
                                                @L.S(S.Live) <strong class="rz-color-danger">@L.S(S.Off)</strong>
                                            </span>
                                        }
                                </div>
                            </div>
                        </li>
                    }
                </ChildContent>
            </RadzenProfileMenu>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@_leftExpanded">
            <RadzenPanelMenu>
                <RadzenPanelMenuItem Text="@L.S(S.Home)" Icon="home" Path="/"/>
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody class="root rz-background-color-base-100">
            <CascadingValue Value="@_session">
                @Body
            </CascadingValue>
        </RadzenBody>
        <RadzenNotification/>
    </RadzenLayout>
</div>

@using Oak.I18n
@using Common.Client
@using Common.Shared.Auth
@inherits LayoutComponentBase
@inject IAuthService Auth;
@inject L L;
@code{

    private bool _leftExpanded;
    private ISession _session = Session.Default(S.DefaultLang, S.DefaultDateFmt, S.DefaultTimeFmt);

    protected override async Task OnInitializedAsync()
    {
        Auth.RegisterRefreshUi(AuthStateChanged);
        AuthStateChanged(await Auth.GetSession());
    }

    private void AuthStateChanged(ISession s)
    {
        _session = s;
        StateHasChanged();
    }

    private async void ToggleLiveUI()
    {
        await Auth.FcmEnabled(!_session.FcmEnabled);
    }

}