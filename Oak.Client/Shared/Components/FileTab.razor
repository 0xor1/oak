@using Oak.Client.Lib
@using Common.Client
@using Oak.Api
@using Oak.Api.File
@using Oak.I18n
@using ATask = Oak.Api.Task.Task;
<div class="flx col jc-s ai-s g-0t w-100 mw-100">
    <RadzenButton class="m-b-1" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="@L.S(S.New)" Click="@OpenNewDialog"/>
    <RadzenDataGrid
        @ref="_grid"
        Count="Count"
        Data="Items"
        TItem="File"
        IsLoading="_isLoading"
        EmptyText="@L.S(S.TaskNoFiles)"
        FilterPopupRenderMode="PopupRenderMode.OnDemand"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        KeyProperty="Id"
        Style="@($"width: {GridWidth}")">
        <Columns>
            <RadzenDataGridColumn Width="22em" TItem="File" Property="@nameof(File.Name)" Title="@L.S(S.Name)">
                <Template Context="f">
                    <div class="flx child-no-shrink jc-s ai-c g-0h w-100 mw-100 p-rel">
                        <span title="@($"{f.Name}")" class="shrink-1 ellip">@f.Name</span>
                        @if (Ctx.CanDeleteVItemOrFile(f))
                        {
                            <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                <a @onclick:stopPropagation="true" href="@(Api.File.DownloadUrl(new (f.Org, f.Project, f.Task, f.Id, true)))" target="_blank">
                                    <RadzenButton Icon="download" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.ExtraSmall"/>
                                </a>
                                <a @onclick:stopPropagation="true" href="@(Api.File.DownloadUrl(new (f.Org, f.Project, f.Task, f.Id, false)))" target="_blank">
                                    <RadzenButton Icon="open_in_new" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.ExtraSmall"/>
                                </a>
                                <RadzenButton Icon="content_copy" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.ExtraSmall" Click="_ => CopyInlineUrlToClipboard(f)"/>
                                <RadzenButton @onclick:stopPropagation="true" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Disabled="!Ctx.CanDeleteVItemOrFile(f)" Click="_ => Delete(f)"/>
                            </div>
                        }
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.User" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="7em" TItem="File" Property="@nameof(File.CreatedBy)" Title="@L.S(S.User)">
                <Template Context="f">
                    <User OrgId="@f.Org" UserId="@f.CreatedBy"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="7em" TItem="File" Property="@nameof(File.Size)" Title="@L.S(S.FileSize)">
                <Template Context="f">
                    @Util.Size(f.Size)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="Ctx.Display.CreatedOn" TextAlign="TextAlign.Center" Width="10em" TItem="File" Property="@nameof(File.CreatedOn)" Title="@L.S(S.CreatedOn)">
                <Template Context="i">
                    @L.D(i.CreatedOn)
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@inject L L;
@inject DialogService DialogService;
@inject IApi Api
@inject UiCtx Ctx
@inject IJSRuntime JS;
@inject NotificationService NotificationService;
@code {

    [Parameter]
    [EditorRequired]
    public Func<ATask, Task> OnChange { get; set; }

    private int Count => Items.Count;
    private List<File> Items { get; set; } = new();
    private bool _isLoading = false;
    private string GridWidth
    {
        get
        {
            var width = 45;
            if (Ctx.Display.CreatedOn)
            {
                width += 7;
            }
            return $"{width}em";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Items.Clear();
        var res = await Api.File.Get(new(Ctx.Org.Id, Ctx.Project.Id, Ctx.Task.Id));
        Items.AddRange(res.Set);
        await _grid.Reload();
        await base.OnParametersSetAsync();
    }

    private async Task Delete(File f)
    {
        var confirmed = await DialogService.Confirm(L.S(S.TaskConfirmDeleteFile, new {f.Name}), L.S(S.Confirm), new ConfirmOptions() { OkButtonText = L.S(S.Delete), CancelButtonText = L.S(S.Cancel) });
        if (confirmed == true)
        {
            var parent = await Api.File.Delete(new(f.Org, f.Project, f.Task, f.Id));
            Items.Remove(f);
            await _grid.Reload();
            await OnChange(parent);
        }
    }

    private async Task OnCreated(FileRes res)
    {
        Items.Add(res.File);
        await _grid.Reload();
        await OnChange(res.Task);
    }

    private RadzenDataGrid<File> _grid;
    
    private async Task OpenNewDialog()
        => await DialogService.OpenAsync<FileUpload>(L.S(S.TaskUploadFile), new (){{"OnCreated", OnCreated}});

    private async Task CopyInlineUrlToClipboard(File f)
    {
        await JS.InvokeVoidAsync("writeTextToClipboard", Api.File.DownloadUrl(new(f.Org, f.Project, f.Task, f.Id, false)));
        NotificationService.Notify(NotificationSeverity.Success, L.S(S.CopyToClipboardSuccess), duration: 2000d);
    }

}