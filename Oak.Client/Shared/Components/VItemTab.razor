@using Oak.Client.Lib
@using Oak.Api.VItem
@using Common.Client
@using Oak.Api
@using Oak.I18n
@using ATask = Oak.Api.Task.Task;
<div class="flx col jc-s ai-s g-0t w-100 mw-100">
    <RadzenButton class="m-b-1" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="@L.S(S.New)" Click="@OpenNewDialog"/>
    <RadzenDataGrid
        @ref="_grid"
        Count="Count"
        Data="Items"
        TItem="VItem"
        IsLoading="_isLoading"
        EmptyText="@L.S(Type == VItemType.Time? S.TaskNoTimes: S.TaskNoCosts)"
        FilterPopupRenderMode="PopupRenderMode.OnDemand"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        KeyProperty="Id"
        Style="@($"width: {GridWidth}")">
        <Columns>
            <RadzenDataGridColumn Width="22em" TItem="VItem" Property="@nameof(VItem.Note)" Title="@L.S(S.Note)">
                <Template Context="i">
                    <div class="flx child-no-shrink jc-s ai-c g-0h w-100 mw-100 p-rel">
                        <span title="@($"{i.Note}")" class="shrink-1 ellip">@i.Note</span>
                        @if (UICtx.HasProjectWritePerm)
                        {
                            <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                <RadzenButton @onclick:stopPropagation="true" Icon="edit" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.ExtraSmall" Disabled="!UICtx.CanDeleteVItemOrFile(i)" Click="_ => Update(i)"/>
                                <RadzenButton @onclick:stopPropagation="true" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Disabled="!UICtx.CanDeleteVItemOrFile(i)" Click="_ => Delete(i)"/>
                            </div>
                        }
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TextAlign="TextAlign.Center" Width="7em" TItem="VItem" Property="@nameof(VItem.Inc)" Title="@L.S(Type == VItemType.Time? S.TimeInc: S.CostInc)">
                <Template Context="i">
                    @Fmt(i)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Visible="UIDisplay.CreatedOn" TextAlign="TextAlign.Center" Width="10em" TItem="VItem" Property="@nameof(VItem.CreatedOn)" Title="@L.S(S.CreatedOn)">
                <Template Context="i">
                    @L.D(i.CreatedOn)
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@inject UIDisplay UIDisplay;
@inject L L;
@inject DialogService DialogService;
@inject IApi Api
@code {

    [Parameter]
    [EditorRequired]
    public VItemType Type { get; set; }

    [Parameter]
    [EditorRequired]
    public UICtx UICtx { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<ATask, Task> OnChange { get; set; }

    private int Count => Items.Count;
    private List<VItem> Items { get; set; } = new();
    private bool _isLoading = false;
    private string GridWidth
    {
        get
        {
            var width = 55;
            if (UIDisplay.CreatedOn)
            {
                width += 7;
            }
            return $"{width}em";
        }
    }

    private string Fmt(VItem i) => i.Type == VItemType.Time ? Util.Duration(UICtx.Project, i.Inc) : Util.Cost(UICtx.Project, i.Inc);

    protected override async Task OnParametersSetAsync()
    {
        Items.Clear();
        var res = await Api.VItem.Get(new(UICtx.Org.Id, UICtx.Project.Id, Type, UICtx.Task.Id));
        Items.AddRange(res.Set);
        await _grid.Reload();
        await base.OnParametersSetAsync();
    }

    private async Task OpenNewDialog()
        => await DialogService.OpenAsync<VItemNewOrUpdate>(L.S(Type == VItemType.Time? S.TaskNewTime : S.TaskNewCost), new (){{"UICtx", UICtx}, {"Type", Type}, {"OnCreated", OnCreated}});


    private async Task Update(VItem i)
        => await DialogService.OpenAsync<VItemNewOrUpdate>(L.S(Type == VItemType.Time? S.TaskUpdateTime : S.TaskUpdateCost), new (){{"UICtx", UICtx}, {"Type", Type}, {"OnUpdated", OnUpdated}});


    private async Task Delete(VItem i)
    {
        var confirmed = await DialogService.Confirm(L.S(S.TaskConfirmDeleteVItem, new {Value = Fmt(i)}), L.S(S.Confirm), new ConfirmOptions() { OkButtonText = L.S(S.Delete), CancelButtonText = L.S(S.Cancel) });
        if (confirmed == true)
        {
            var parent = await Api.VItem.Delete(new(i.Org, i.Project, i.Task, i.Type, i.Id));
            Items.Remove(i);
            await _grid.Reload();
            await OnChange(parent);
        }
    }

    private async Task OnCreated(VItemRes res)
    {
        Items.Add(res.Item);
        await _grid.Reload();
        await OnChange(res.Task);
    }

    private async Task OnUpdated(VItemRes res)
    {
        var i = Items.FindIndex(x => x.Id == res.Item.Id);
        Items[i] = res.Item;
        await _grid.Reload();
        await OnChange(res.Task);
    }

    private RadzenDataGrid<VItem> _grid;
}