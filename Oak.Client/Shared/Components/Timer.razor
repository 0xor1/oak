@using Common.Client
@using Common.Shared
@using Oak.Client.Lib
@using S = Oak.I18n.S
@using System.Timers
@using Oak.Api
@using Oak.Api.VItem
<div class="flx col g-0h p-l-4 p-y-0h ptr timer" @onclick="@GoToTask">
    <RadzenLabel class="ptr ellip m-r-4">@Value.TaskName</RadzenLabel>
    <div class="flx g-0h ptr">
        @if (Value.IsRunning)
        {
            <RadzenLabel class="m-r-1">@Util.TimerDuration(Value.Inc + (ulong)DateTimeExt.UtcNowMilli().Subtract(Value.LastStartedOn).TotalSeconds)</RadzenLabel>
            <RadzenButton @onclick:stopPropagation="true" Icon="pause_circle" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.ExtraSmall" Click="_ => ToggleTimer(false)"/>
        }
        else
        {
            <RadzenLabel class="m-r-1">@Util.TimerDuration(Value.Inc)</RadzenLabel>
            <RadzenButton @onclick:stopPropagation="true" Icon="play_circle" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall" Click="_ => ToggleTimer(true)"/>
        }
        <RadzenButton @onclick:stopPropagation="true" Icon="more_time" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall" Click="LogTimer"/>
        <RadzenButton @onclick:stopPropagation="true" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Click="DeleteTimer"/>
    </div>
</div>

@inject L L;
@inject UiCtx Ctx;
@inject IApi Api
@inject NavigationManager Nav;
@inject ITimerService TimerService;
@implements IDisposable
@code {

    [Parameter]
    [EditorRequired]
    public Oak.Api.Timer.Timer Value { get; set; }
    
    private System.Timers.Timer? Ticker; 

    protected override async Task OnParametersSetAsync()
    {
        Ticker?.Dispose();
        Ticker = new System.Timers.Timer(TimeSpan.FromSeconds(1))
        {
            AutoReset = true,
            Enabled = true
        };
        Ticker.Elapsed += TimerTick;
    }

    private void TimerTick(object? obj, ElapsedEventArgs? args)
    {
        if (Ctx.Timers?.Any(x => x.IsRunning) ?? false)
        {
            Ticker?.Start();
            InvokeAsync(StateHasChanged);
        }
        else
        {
            Ticker?.Stop();
        }
    }

    private async Task ToggleTimer(bool isRunning)
    {
        var ts = await Api.Timer.Update(new(Value.Org, Value.Project, Value.Task, isRunning));
        TimerService.TimersChanged(ts.ToList());
    }

    private async Task LogTimer()
    {
        // TODO launch log time dialog pre filled out
        // if it closes with success then delete timer, otherwise do nothingw
        await DeleteTimer();
    }

    private async Task DeleteTimer()
    {
        var ts = await Api.Timer.Delete(new(Value.Org, Value.Project, Value.Task));
        TimerService.TimersChanged(ts.ToList());
    }

    public void Dispose()
    {
        Ticker?.Dispose();
    }

    private void GoToTask()
    {
        Nav.NavigateTo($"/org/{Value.Org}/project/{Value.Project}/task/{Value.Task}");
    }

}