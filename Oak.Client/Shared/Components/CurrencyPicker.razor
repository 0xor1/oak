@using Common.Shared
<RadzenDropDown @ref="@_ddRef" Name="@Name" Value="Value" ValueChanged="InternalValueChanged" TValue="Currency" Data="Currencies" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith"/>

@implements IRadzenFormComponent
@code {

    public record Currency(string Code, string Symbol, uint Divisions = 100)
    {
        public override string ToString()
            => $"{Code}, {Symbol}";
    }
    
    private RadzenDropDown<Currency> _ddRef = default!;

    [Parameter]
    public string Name { get; set; } = "";
    [Parameter]
    public Currency Value { get; set; }
    [Parameter]
    public EventCallback<Currency>? ValueChanged { get; set; }
    
    private async Task InternalValueChanged(Currency v)
    {
        Value = v;
        if (ValueChanged != null)
        {
            await ValueChanged.NotNull().InvokeAsync(v);
        }
    }

    public static Currency USD = new("USD", "$");
    public static Currency EUR = new("EUR", "€");
    public static Currency GBP = new("GBP", "£");
    
    public static IReadOnlyList<Currency> Currencies = new List<Currency>()
    {
        // most common at top
        USD,
        EUR,
        GBP,
        // rest alphabetically
        new("AUD", "$"),
        new("CAD", "$"),
        new("CNY", "¥"),
        new("INR", "₹"),
        new("JPY", "¥", 1),
        new("KRW", "₩"),
        new("NZD", "$")
    };

    public object GetValue() => _ddRef.GetValue();
    public bool IsBound => _ddRef.IsBound;
    public bool HasValue => _ddRef.HasValue;
    public FieldIdentifier FieldIdentifier => _ddRef.FieldIdentifier;
}