@using Oak.Client.Lib
@using Common.Client
@using Common.Shared
@using Ganss.Xss
@using Oak.Api
@using Oak.Api.Comment
@using Oak.Api.File
@using Oak.I18n
@using S = Oak.I18n.S
@using ATask = Oak.Api.Task.Task;
<div class="flx col jc-s ai-s g-0t w-100 mw-100">
    @if (Ctx.HasProjectWritePerm)
    {
        <RadzenHtmlEditor @ref="_htmlEditor" @bind-Value="Value" Name="Comment" class="w-100" style="height: 12em" @onkeydown="KeyDown"/>
        <textarea @ref="_altTextArea" style="width: 0; height: 0; border: 0; margin: 0;padding: 0"></textarea>
    }
    @foreach (var i in Items)
    {
        <RadzenCard class="flx col w-100 comment-card">
            <div class="f-0t flx g-1 row ai-c h-2 rz-color-base-100">
                <User OrgId="@Ctx.OrgId" UserId="@i.CreatedBy"></User>
                <span>@L.D(i.CreatedOn) @L.T(i.CreatedOn)</span>
                <span class="comment-actions">
                    <RadzenButton title="@L.S(S.Delete)" @onclick:stopPropagation="true" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Disabled="!Ctx.CanDeleteOorUpdateComment(i)" Click="_ => Delete(i)"/>
                </span>
            </div>
            <div>
                @AddLineBreaks(i)
            </div>
        </RadzenCard>
    }
</div>

@inject L L;
@inject DialogService DialogService;
@inject IApi Api
@inject UiCtx Ctx
@inject IJSRuntime Js
@inject IHtmlSanitizer HtmlSanitizer
@code {

    private List<Comment> Items { get; set; } = new();
    private bool _isLoading = false;
    private string Value { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        Items.Clear();
        var res = await Api.Comment.Get(new(Ctx.Org.Id, Ctx.Project.Id, Ctx.Task.Id));
        Items.AddRange(res.Set);
        await base.OnParametersSetAsync();
    }

    private async Task Delete(Comment c)
    {
        var confirmed = await DialogService.Confirm(L.S(S.TaskConfirmDeleteComment), L.S(S.Confirm), new ConfirmOptions() { OkButtonText = L.S(S.Delete), CancelButtonText = L.S(S.Cancel) });
        if (confirmed == true)
        {
            await Api.Comment.Delete(new(c.Org, c.Project, c.Task, c.Id));
            Items.Remove(c);
        }
    }

    private async Task KeyDown(KeyboardEventArgs arg)
    {
        if (arg.Code == "Enter" && !arg.ShiftKey)
        {
            // this is a hack to force the html editor to refresh its value
            // otherwise it is always empty string
            await _altTextArea.FocusAsync();
            Value = Value.Trim();
            if (!Value.IsNullOrWhiteSpace())
            {
                var v = HtmlSanitizer.Sanitize(Value);
                Value = "";
                var c = await Api.Comment.Create(new(Ctx.OrgId, Ctx.ProjectId, Ctx.TaskId, v));
                Items.Insert(0, c);
                StateHasChanged();
            }
            await _htmlEditor.FocusAsync();
        }
    }

    private MarkupString AddLineBreaks(Comment c) => new (c.Body.Replace("\n", "<br>"));
    private ElementReference _textArea;
    private ElementReference _altTextArea;
    private RadzenHtmlEditor _htmlEditor;
}