@using Oak.Client.Lib
@using AuthValidator = Oak.Client.Lib.AuthValidator
<div class="root jc-c ai-c">
    <RadzenCard class="flx col jc-c ai-c p-3 w-25">
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
            Sign Out
        </RadzenText>
        @if (_signingOut)
        {
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-b-1">
                Signing Out
            </RadzenText>
        }
        else
        {
            @if (_success)
            {
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-b-1 rz-color-success">
                Success
            </RadzenText>
            }
            else
            {
                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-b-1 rz-color-danger">
                    Error
                </RadzenText>
            }
        }
        <RadzenButton ButtonType="ButtonType.Button" BusyText="Signing Out" IsBusy="_signingOut" Text="Sign In" Click="SignIn"/>
    </RadzenCard>
</div>

@inject IAuthService Auth;
@inject NavigationManager Nav;
@inject IMainLayoutService Main;
@code{

    private bool _signingOut = false;

    private bool _success = false;

    protected override async Task OnInitializedAsync()
    {
        _signingOut = true;
        try
        {
            await Auth.SignOut();
            _success = true;
            await Main.AuthStateChanged();
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _signingOut = false;
        
    }

    private void SignIn()
    {
        if (!_signingOut && _success)
        {
            Nav.NavigateTo("sign_in");
        }
    }
}