@using Oak.Client.Lib
@using System.Text.RegularExpressions
@using Common
@using AuthValidator = Oak.Client.Lib.AuthValidator
<div class="root jc-c ai-c">
    <RadzenCard class="p-3 w-25">
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
            Sign In
        </RadzenText>
        <RadzenTemplateForm
            TItem="SignInModel"
            Data="_model"
            Submit="Submit"
            class="flx col ai-stretch g-1">
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Email" Text="Email"/>
                <RadzenTextBox Name="Email" @bind-Value="@_model.Email"/>
                <RadzenCustomValidator Validator="EmailValidator" Component="Email" Popup="true" Text="Invalid email"></RadzenCustomValidator>
            </div>
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Password" Text="Password"/>
                <RadzenPassword Name="Password" @bind-Value="@_model.Pwd"/>
                <RadzenCustomValidator Validator="PwdValidator" Component="Password" Popup="true" Text="Invalid password"></RadzenCustomValidator>
            </div>
            <div class="flx g-0h">
                <RadzenCheckBox Name="RememberMe" @bind-Value="@_model.RememberMe"/>
                <RadzenLabel class="m-b-0q" Component="RememberMe" Text="Remember Me"/>
            </div>
            <RadzenButton ButtonType="ButtonType.Submit" BusyText="Signing In" IsBusy="_signingIn" Text="Sign In"/>
            <div class="flx jc-sb">
                <RadzenLink Path="register" Text="Register"></RadzenLink>
                <RadzenLink Path="send_reset_pwd_email" Text="Reset Password"></RadzenLink>
            </div>
        </RadzenTemplateForm>
    </RadzenCard>
</div>

@inject NavigationManager Nav;
@inject IAuthService Auth;
@inject IMainLayoutService Main;
@code{

    class SignInModel
    {
        public string Email { get; set; } = "";
        public string Pwd { get; set; } = "";
        public bool RememberMe { get; set; } = false;
    }

    private SignInModel _model = new ();

    private bool _signingIn = false;

    private async Task Submit()
    {
        _signingIn = true;
        try
        {
            await Auth.SignIn(_model.Email, _model.Pwd, _model.RememberMe);
            await Main.AuthStateChanged();
            Nav.NavigateTo("/");
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _signingIn = false;
    }

    private ValidationResult EmailValidator(IRadzenFormComponent component)
        => AuthValidator.EmailValidator(component);

    private ValidationResult PwdValidator(IRadzenFormComponent component)
        => AuthValidator.PwdValidator(component);
}