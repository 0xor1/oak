@using Oak.Client.Lib
@using System.Text.RegularExpressions
@using Common
@using Oak.Proto
@using AuthValidator = Oak.Client.Lib.AuthValidator
<div class="root jc-c ai-c">
    <RadzenCard class="p-3 w-25">
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
            Send Reset Password Link
        </RadzenText>
        <RadzenTemplateForm
            TItem="SendResetPwdEmailModel"
            Data="_model"
            Submit="Submit"
            class="flx col ai-stretch g-1">
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Email" Text="Email"/>
                <RadzenTextBox Name="Email" @bind-Value="@_model.Email" Disabled="!CanSend"/>
                <RadzenCustomValidator Validator="EmailValidator" Component="Email" Popup="true" Text="Invalid email"></RadzenCustomValidator>
            </div>
            @if (_success)
            {
                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-t-0 f-b rz-color-success-light">
                    If this email matches an account an email will have been sent to reset your password.
                </RadzenText>
            }
            <RadzenButton ButtonType="ButtonType.Submit" BusyText="Processing" IsBusy="_sending" Text="Send" Disabled="!CanSend"/>
            <div class="flx jc-sb">
                <RadzenLink Path="sign_in" Text="Sign In"></RadzenLink>
                <RadzenLink Path="register" Text="Register"></RadzenLink>
            </div>
        </RadzenTemplateForm>
    </RadzenCard>
</div>

@inject Api.ApiClient Api;
@code{

    class SendResetPwdEmailModel
    {
        public string Email { get; set; } = "";
    }

    private bool CanSend => !_sending && !_success;

    private SendResetPwdEmailModel _model = new ();

    private bool _sending = false;

    private bool _success = false;

    private async Task Submit()
    {
        _sending = true;
        _success = false;
        try
        {
            await Api.Auth_SendResetPwdEmailAsync(new Auth_SendResetPwdEmailReq()
            {
                Email = _model.Email
            });
            _success = true;
        }
        catch
        {
            _success = false;
        }
        _sending = false;
    }

    private ValidationResult EmailValidator(IRadzenFormComponent component)
        => AuthValidator.EmailValidator(component);
}